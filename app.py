import streamlit as st
import re
import time
import requests
import PyPDF2
import io
from typing import Dict, List

# Hugging Face API details
# Get your free API key from: https://huggingface.co/settings/tokens
# Make sure to select "Inference API" permissions when creating the token
HUGGINGFACE_API_KEY = "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"  # Replace with your actual Hugging Face API key
HUGGINGFACE_API_URL = "https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium"
TOKEN_LIMIT = 400
RATE_LIMIT_DELAY = 15

# Alternative: Use a free model that doesn't require special permissions
ALTERNATIVE_API_URL = "https://api-inference.huggingface.co/models/gpt2"

# Page configuration
st.set_page_config(
    page_title="MediSimplify - AI Medical Report Simplifier",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Working Language mapping
LANGUAGE_MAPPING = {
    "English": "English",
    "Hindi": "‡§π‡§ø‡§Ç‡§¶‡•Ä (Hindi)",
    "Bengali": "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ (Bengali)",
    "Telugu": "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å (Telugu)",
    "Marathi": "‡§Æ‡§∞‡§æ‡§†‡•Ä (Marathi)",
    "Tamil": "‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç (Tamil)",
    "Gujarati": "‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä (Gujarati)",
    "Kannada": "‡≤ï‡≤®‡≥ç‡≤®‡≤° (Kannada)",
    "Malayalam": "‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç (Malayalam)",
    "Punjabi": "‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä (Punjabi)",
    "Odia": "‡¨ì‡¨°‡¨º‡¨ø‡¨Ü (Odia)",
    "Urdu": "ÿßÿ±ÿØŸà (Urdu)",
    "Spanish": "Espa√±ol (Spanish)",
    "French": "Fran√ßais (French)",
    "German": "Deutsch (German)",
    "Chinese": "‰∏≠Êñá (Chinese)",
    "Arabic": "ÿßŸÑÿπÿ±ÿ®Ÿäÿ© (Arabic)",
    "Portuguese": "Portugu√™s (Portuguese)",
    "Russian": "–†—É—Å—Å–∫–∏–π (Russian)",
    "Japanese": "Êó•Êú¨Ë™û (Japanese)",
}

# Enhanced Professional CSS with Medical Theme
st.markdown("""
<style>
    /* Import Google Fonts */
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&display=swap');
    
    /* Global Styles */
    .main {
        font-family: 'Poppins', sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
        min-height: 100vh;
    }
    
    /* Main background with medical theme */
    .main .block-container {
        background: linear-gradient(135deg, #2c3e50 0%, #3498db 25%, #9b59b6 50%, #e74c3c 75%, #f39c12 100%);
        background-size: 400% 400%;
        animation: gradientShift 20s ease infinite;
        padding: 2rem 1rem;
        border-radius: 25px;
        margin: 1rem;
        box-shadow: 0 20px 40px rgba(0,0,0,0.3);
        position: relative;
        overflow: hidden;
    }
    
    .main .block-container::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: 
            radial-gradient(circle at 20% 80%, rgba(255, 255, 255, 0.1) 0%, transparent 50%),
            radial-gradient(circle at 80% 20%, rgba(255, 255, 255, 0.1) 0%, transparent 50%);
        animation: backgroundFloat 15s ease-in-out infinite;
        z-index: 0;
    }
    
    @keyframes gradientShift {
        0% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
        100% { background-position: 0% 50%; }
    }
    
    @keyframes backgroundFloat {
        0%, 100% { transform: translateX(0) translateY(0) rotate(0deg); }
        25% { transform: translateX(-20px) translateY(-10px) rotate(90deg); }
        50% { transform: translateX(20px) translateY(10px) rotate(180deg); }
        75% { transform: translateX(-10px) translateY(20px) rotate(270deg); }
    }
    
    /* Header styling with medical icons */
    .main-header {
        font-family: 'Poppins', sans-serif;
        font-size: 4.5rem;
        font-weight: 800;
        text-align: center;
        background: linear-gradient(45deg, #3498db 0%, #667eea 100%);
        background-size: 300% 300%;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        animation: rainbow 4s ease-in-out infinite;
        margin-bottom: 1.5rem;
        position: relative;
        z-index: 1;
    }
    
    .main-header::before {
        content: 'üè•';
        position: absolute;
        left: -80px;
        top: 50%;
        transform: translateY(-50%);
        font-size: 3rem;
        animation: pulse 2s infinite;
    }
    
    .main-header::after {
        content: 'üíä';
        position: absolute;
        right: -80px;
        top: 50%;
        transform: translateY(-50%);
        font-size: 3rem;
        animation: pulse 2s infinite reverse;
    }
    
    @keyframes rainbow {
        0%, 100% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
    }
    
    @keyframes pulse {
        0%, 100% { transform: translateY(-50%) scale(1); }
        50% { transform: translateY(-50%) scale(1.1); }
    }
    
    .subtitle {
        text-align: center;
        font-family: 'Poppins', sans-serif;
        font-size: 1.6rem;
        font-weight: 500;
        color: #ffffff;
        margin-bottom: 3rem;
        padding: 1rem 2rem;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 15px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    }
    
    /* Sidebar styling */
    .css-1d391kg {
        background: linear-gradient(180deg, #667eea 0%, #764ba2 100%);
        border-radius: 20px;
        margin: 1rem;
        padding: 1rem;
    }
    
    .sidebar .sidebar-content {
        background: transparent;
    }
    
    /* Card styling */
    .result-box {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9ff 100%);
        padding: 2.5rem;
        border-radius: 20px;
        border: none;
        margin: 2rem 0;
        color: #2c3e50 !important;
        font-family: 'Poppins', sans-serif;
        line-height: 1.8;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.3);
        position: relative;
        overflow: hidden;
    }
    
    .result-box::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #ff6b6b, #4ecdc4, #45b7d1, #96ceb4, #feca57);
        background-size: 300% 100%;
        animation: rainbow 2s ease-in-out infinite;
    }
    
    .result-box * {
        color: #2c3e50 !important;
    }
    
    /* Translation info box */
    .translation-info {
        background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
        color: #1565c0 !important;
        padding: 1.5rem;
        border-radius: 15px;
        border: none;
        margin: 1rem 0;
        box-shadow: 0 8px 25px rgba(33, 150, 243, 0.2);
        border-left: 5px solid #2196f3;
        font-family: 'Poppins', sans-serif;
        font-weight: 500;
    }
    
    .translation-info * {
        color: #1565c0 !important;
    }
    
    /* Feature cards */
    .feature-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 20px;
        color: white;
        margin: 1rem 0;
        text-align: center;
        font-family: 'Poppins', sans-serif;
        font-weight: 600;
        box-shadow: 0 15px 35px rgba(102, 126, 234, 0.3);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        position: relative;
        overflow: hidden;
    }
    
    .feature-card::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
        transform: rotate(45deg);
        transition: all 0.5s;
        opacity: 0;
    }
    
    .feature-card:hover::before {
        animation: shine 0.8s ease-in-out;
    }
    
    .feature-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 20px 40px rgba(102, 126, 234, 0.4);
    }
    
    @keyframes shine {
        0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); opacity: 0; }
        50% { opacity: 1; }
        100% { transform: translateX(100%) translateY(100%) rotate(45deg); opacity: 0; }
    }
    
    /* Language section styling */
    .language-section {
        background: rgba(255, 255, 255, 0.1);
        padding: 2rem;
        border-radius: 20px;
        margin: 2rem 0;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    }
    
    /* Button styling */
    .stButton > button {
        background: linear-gradient(135deg, #ff6b6b 0%, #4ecdc4 100%);
        color: white;
        border: none;
        border-radius: 25px;
        padding: 0.75rem 2rem;
        font-family: 'Poppins', sans-serif;
        font-weight: 600;
        font-size: 1.1rem;
        box-shadow: 0 8px 25px rgba(255, 107, 107, 0.3);
        transition: all 0.3s ease;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
    
    .stButton > button:hover {
        transform: translateY(-3px);
        box-shadow: 0 12px 35px rgba(255, 107, 107, 0.4);
        background: linear-gradient(135deg, #ff5252 0%, #26a69a 100%);
    }
    
    /* File uploader styling */
    .stFileUploader > div > div {
        background: rgba(255, 255, 255, 0.9);
        border-radius: 15px;
        border: 2px dashed #667eea;
        padding: 2rem;
        text-align: center;
        transition: all 0.3s ease;
    }
    
    .stFileUploader > div > div:hover {
        background: rgba(255, 255, 255, 1);
        border-color: #4ecdc4;
        transform: scale(1.02);
    }
    
    /* Text area styling */
    .stTextArea > div > div > textarea {
        background: rgba(255, 255, 255, 0.9);
        border-radius: 15px;
        border: 2px solid #e0e0e0;
        font-family: 'Poppins', sans-serif;
        padding: 1rem;
        transition: all 0.3s ease;
    }
    
    .stTextArea > div > div > textarea:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }
    
    /* Selectbox styling */
    .stSelectbox > div > div {
        background: rgba(255, 255, 255, 0.9);
        border-radius: 15px;
        border: 2px solid #e0e0e0;
        font-family: 'Poppins', sans-serif;
        transition: all 0.3s ease;
    }
    
    .stSelectbox > div > div:hover {
        border-color: #667eea;
    }
    
    /* Radio button styling */
    .stRadio > div {
        background: rgba(255, 255, 255, 0.1);
        padding: 1rem;
        border-radius: 15px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }
    
    /* Tab styling */
    .stTabs > div > div > div {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 15px 15px 0 0;
        backdrop-filter: blur(10px);
    }
    
    .stTabs > div > div > div > button {
        background: transparent;
        color: white;
        font-family: 'Poppins', sans-serif;
        font-weight: 500;
        border-radius: 10px;
        margin: 0.25rem;
        transition: all 0.3s ease;
    }
    
    .stTabs > div > div > div > button:hover {
        background: rgba(255, 255, 255, 0.2);
        transform: translateY(-2px);
    }
    
    /* Success/Error message styling */
    .stSuccess {
        background: linear-gradient(135deg, #4caf50 0%, #8bc34a 100%);
        color: white;
        border-radius: 15px;
        padding: 1rem;
        font-family: 'Poppins', sans-serif;
        font-weight: 500;
    }
    
    .stError {
        background: linear-gradient(135deg, #f44336 0%, #ff5722 100%);
        color: white;
        border-radius: 15px;
        padding: 1rem;
        font-family: 'Poppins', sans-serif;
        font-weight: 500;
    }
    
    .stInfo {
        background: linear-gradient(135deg, #2196f3 0%, #03a9f4 100%);
        color: white;
        border-radius: 15px;
        padding: 1rem;
        font-family: 'Poppins', sans-serif;
        font-weight: 500;
    }
    
    .stWarning {
        background: linear-gradient(135deg, #ff9800 0%, #ffc107 100%);
        color: white;
        border-radius: 15px;
        padding: 1rem;
        font-family: 'Poppins', sans-serif;
        font-weight: 500;
    }
    
    /* Footer styling */
    .footer {
        text-align: center;
        color: white;
        padding: 2rem;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 20px;
        margin-top: 2rem;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        font-family: 'Poppins', sans-serif;
    }
    
    /* Spinner styling */
    .stSpinner > div {
        border-color: #667eea transparent #667eea transparent;
    }
    
    /* Override default text colors */
    .stMarkdown, .stMarkdown p, .stMarkdown div {
        color: #2c3e50 !important;
    }
    
    div[data-testid="stMarkdownContainer"] * {
        color: #2c3e50 !important;
    }
    
    /* Custom scrollbar */
    ::-webkit-scrollbar {
        width: 8px;
    }
    
    ::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
    }
    
    ::-webkit-scrollbar-thumb {
        background: linear-gradient(135deg, #667eea, #764ba2);
        border-radius: 10px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(135deg, #5a6fd8, #6a4190);
    }
    
    /* Medical Icons and Professional Elements */
    .medical-icon {
        font-size: 2.5rem;
        margin: 0 10px;
        display: inline-block;
        animation: pulse 2s infinite;
        filter: drop-shadow(0 4px 8px rgba(0,0,0,0.3));
    }
    
    .medical-icon:nth-child(even) {
        animation-delay: 1s;
    }
    
    /* Professional Cards */
    .professional-card {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9ff 100%);
        padding: 2.5rem;
        border-radius: 20px;
        margin: 2rem 0;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        border: 1px solid rgba(255,255,255,0.3);
        position: relative;
        overflow: hidden;
        backdrop-filter: blur(10px);
    }
    
    .professional-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 5px;
        background: linear-gradient(90deg, #667eea, #764ba2, #f093fb, #f5576c);
        background-size: 300% 100%;
        animation: gradientMove 3s ease infinite;
    }
    
    @keyframes gradientMove {
        0%, 100% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
    }
    
    /* Status Indicators */
    .status-normal {
        background: linear-gradient(135deg, #4CAF50, #45a049);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-weight: 600;
        display: inline-block;
        margin: 0.2rem;
        box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
    }
    
    .status-warning {
        background: linear-gradient(135deg, #FF9800, #F57C00);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-weight: 600;
        display: inline-block;
        margin: 0.2rem;
        box-shadow: 0 4px 15px rgba(255, 152, 0, 0.3);
    }
    
    .status-danger {
        background: linear-gradient(135deg, #F44336, #D32F2F);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-weight: 600;
        display: inline-block;
        margin: 0.2rem;
        box-shadow: 0 4px 15px rgba(244, 67, 54, 0.3);
    }
    
    /* Enhanced Typography */
    .section-title {
        font-size: 2.5rem;
        font-weight: 700;
        color: #2c3e50;
        margin: 2rem 0 1rem 0;
        text-align: center;
        position: relative;
    }
    
    .section-title::after {
        content: '';
        position: absolute;
        bottom: -10px;
        left: 50%;
        transform: translateX(-50%);
        width: 100px;
        height: 4px;
        background: linear-gradient(90deg, #667eea, #764ba2);
        border-radius: 2px;
    }
    
    /* Loading Animation */
    .loading-spinner {
        display: inline-block;
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #667eea;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    /* Enhanced Metrics */
    .metric-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin: 2rem 0;
    }
    
    .metric-item {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        text-align: center;
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        transition: transform 0.3s ease;
    }
    
    .metric-item:hover {
        transform: translateY(-5px);
    }
    
    .metric-value {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
    }
    
    .metric-label {
        font-size: 0.9rem;
        opacity: 0.9;
        font-weight: 500;
    }
    
    /* Hide Streamlit branding */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    
    /* Mobile Responsive */
    @media (max-width: 768px) {
        .main-header {
            font-size: 2.5rem;
        }
        
        .main-header::before,
        .main-header::after {
            display: none;
        }
        
        .professional-card {
            padding: 1.5rem;
        }
        
        .metric-container {
            grid-template-columns: 1fr;
        }
    }
</style>
""", unsafe_allow_html=True)

# Function to extract text from PDF
def extract_pdf_text(pdf_file):
    try:
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text()
        return text
    except Exception as e:
        return f"Error extracting PDF text: {e}"

# Function to identify medical test types
def identify_test_types(text):
    test_patterns = {
        'CBC': r'(?i)(hemoglobin|hematocrit|white blood cell|red blood cell|platelet|mcv|mch|mchc|wbc|rbc)',
        'Lipid Profile': r'(?i)(cholesterol|triglycerides|hdl|ldl|vldl)',
        'Liver Function': r'(?i)(alt|ast|bilirubin|alkaline phosphatase|ggt|sgpt|sgot)',
        'Kidney Function': r'(?i)(creatinine|urea|bun|egfr)',
        'Thyroid': r'(?i)(tsh|t3|t4|thyroid)',
        'Diabetes': r'(?i)(glucose|hba1c|insulin|blood sugar)',
        'Cardiac': r'(?i)(troponin|ck-mb|bnp|pro-bnp)',
        'Electrolytes': r'(?i)(sodium|potassium|chloride|calcium|magnesium)'
    }
    
    detected_tests = []
    for test_name, pattern in test_patterns.items():
        if re.search(pattern, text):
            detected_tests.append(test_name)
    
    return detected_tests

# FIXED: Enhanced translation function
def simplify_medical_report(text, detected_tests, target_language="English"):
    # For now, use fallback explanation due to API issues
    # TODO: Fix API connection when models are available
    return generate_fallback_explanation(text, detected_tests, target_language)
    # return generate_fallback_explanation(text, detected_tests, target_language) # This line was forcing fallback. Commented out to enable API calls.
    
    # Check if API key is properly configured
    if HUGGINGFACE_API_KEY == "hf_your_api_key_here" or not HUGGINGFACE_API_KEY.startswith("hf_"):
        return generate_fallback_explanation(text, detected_tests, target_language)
    
    headers = {
        "Authorization": f"Bearer {HUGGINGFACE_API_KEY}",
        "Content-Type": "application/json"
    }
    
    test_context = ", ".join(detected_tests) if detected_tests else "general medical tests"
    
    # Create a comprehensive prompt for medical report simplification
    prompt = f"""You are a medical report simplifier. Convert this complex medical report into simple, patient-friendly explanations in {target_language}.

Medical Report:
{text}

Detected Test Types: {test_context}

Please provide:
1. A simple explanation of what each test measures
2. Whether values are normal, high, or low
3. What abnormal values might mean for health
4. Basic recommendations if applicable
5. A disclaimer about consulting healthcare professionals

Format with emojis and bullet points for better readability. Keep language simple and easy to understand for patients."""

    # Try multiple models in order of preference
    models_to_try = [
        "https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium",
        "https://api-inference.huggingface.co/models/gpt2",
        "https://api-inference.huggingface.co/models/distilgpt2",
        "https://api-inference.huggingface.co/models/facebook/blenderbot-400M-distill",
        "https://api-inference.huggingface.co/models/microsoft/DialoGPT-small"
    ]
    
    for model_url in models_to_try:
        try:
            payload = {
                "inputs": prompt,
                "parameters": {
                    "max_length": 800,
                    "temperature": 0.7,
                    "do_sample": True,
                    "top_p": 0.9,
                    "repetition_penalty": 1.1
                }
            }
            
            response = requests.post(model_url, json=payload, headers=headers, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                
                # Handle different response formats from Hugging Face
                if isinstance(result, list) and len(result) > 0:
                    if "generated_text" in result[0]:
                        generated_text = result[0]["generated_text"]
                    elif "text" in result[0]:
                        generated_text = result[0]["text"]
                    else:
                        generated_text = str(result[0])
                elif isinstance(result, dict):
                    if "generated_text" in result:
                        generated_text = result["generated_text"]
                    elif "text" in result:
                        generated_text = result["text"]
                    else:
                        generated_text = str(result)
                else:
                    generated_text = str(result)
                
                # Clean up the generated text
                if generated_text.startswith(prompt):
                    generated_text = generated_text[len(prompt):].strip()
                
                # If we got a reasonable response, return it
                if len(generated_text) > 50:
                    # DEBUG: Show what language was requested vs what we got
                    if target_language != "English":
                        st.info(f"üîÑ Requested translation to: {target_language}")
                        if len(generated_text) > 100:
                            st.info(f"üìù First 100 chars of result: {generated_text[:100]}...")
                    
                    return generated_text
                else:
                    continue  # Try next model
                    
            elif response.status_code == 404:
                st.warning(f"‚ö† Model not found: {model_url.split('/')[-1]}. Trying next model...")
                continue  # Try next model
            elif response.status_code == 429:
                st.warning("‚è≥ Rate limit exceeded. Trying next model...")
                continue  # Try next model
            elif response.status_code == 401:
                return "‚ùå Authentication failed. Please check your Hugging Face API key."
            elif response.status_code == 403:
                return "‚ùå Permission denied. Your API key needs 'Inference API' permissions. Please create a new token with proper permissions."
            elif response.status_code == 503:
                st.warning("‚è≥ Model is loading. Trying next model...")
                continue  # Try next model
            else:
                st.warning(f"‚ö† API Error {response.status_code} with {model_url.split('/')[-1]}. Trying next model...")
                continue  # Try next model
                
        except Exception as e:
            st.warning(f"‚ö† Error with {model_url.split('/')[-1]}: {str(e)}. Trying next model...")
            continue  # Try next model
    
    # If all models failed, return fallback
    st.warning("‚ö† All AI models failed. Using fallback explanation.")
    return generate_fallback_explanation(text, detected_tests, target_language)

def extract_medical_values(text):
    """Extract actual medical values from the report text"""
    import re
    
    values = {}
    
    # Common medical value patterns
    patterns = {
        'hemoglobin': r'(?i)hemoglobin[:\s]([0-9.]+)\s(g/dL|g/dl)',
        'wbc': r'(?i)(white blood cell|wbc)[:\s]([0-9,]+)\s(cells/ŒºL|cells/ul)',
        'platelets': r'(?i)platelets?[:\s]([0-9,]+)\s(cells/ŒºL|cells/ul)',
        'cholesterol': r'(?i)(?:total\s+)?cholesterol[:\s]([0-9]+)\s(mg/dL|mg/dl)',
        'ldl': r'(?i)ldl[:\s]([0-9]+)\s(mg/dL|mg/dl)',
        'hdl': r'(?i)hdl[:\s]([0-9]+)\s(mg/dL|mg/dl)',
        'tsh': r'(?i)tsh[:\s]([0-9.]+)\s(mIU/L|miu/l)',
        't4': r'(?i)t4[:\s]([0-9.]+)\s(Œºg/dL|ug/dl)',
        'creatinine': r'(?i)creatinine[:\s]([0-9.]+)\s(mg/dL|mg/dl)',
        'bun': r'(?i)bun[:\s]([0-9]+)\s(mg/dL|mg/dl)',
        'glucose': r'(?i)(?:fasting\s+)?(?:glucose|blood\s+sugar)[:\s]([0-9]+)\s(mg/dL|mg/dl)',
        'hba1c': r'(?i)hba1c[:\s]([0-9.]+)\s%'
    }
    
    for key, pattern in patterns.items():
        matches = re.findall(pattern, text)
        if matches:
            if key in ['wbc', 'platelets']:
                # For WBC and platelets, the number is in the second group
                values[key] = matches[0][1].replace(',', '')
            else:
                # For others, the number is in the first group
                values[key] = matches[0][0] if isinstance(matches[0], str) else matches[0][0]
    
    return values

def generate_value_analysis(test_type, extracted_values, target_language="English"):
    """Generate specific analysis based on extracted values"""
    
    if not extracted_values:
        return ""
    
    analysis = ""
    
    is_hindi = target_language == "Hindi"

    if test_type == "CBC":
        if 'hemoglobin' in extracted_values:
            hgb = float(extracted_values['hemoglobin'])
            if hgb < 12:
                status = "‡§ï‡§Æ" if is_hindi else "Low"
                analysis += f"*Hemoglobin: {hgb} g/dL - {status}*\n"
                analysis += "‚Ä¢ ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§è‡§®‡•Ä‡§Æ‡§ø‡§Ø‡§æ - ‡§Ü‡§Ø‡§∞‡§® ‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§≠‡•ã‡§ú‡§® ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç" if is_hindi else "‚Ä¢ Possible anemia - consider iron-rich foods"
            elif hgb > 16:
                status = "‡§â‡§ö‡•ç‡§ö" if is_hindi else "High"
                analysis += f"*Hemoglobin: {hgb} g/dL - {status}*\n"
                analysis += "‚Ä¢ ‡§®‡§ø‡§∞‡•ç‡§ú‡§≤‡•Ä‡§ï‡§∞‡§£ ‡§Ø‡§æ ‡§Ö‡§®‡•ç‡§Ø ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§∏‡§Ç‡§ï‡•á‡§§ ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à" if is_hindi else "‚Ä¢ May indicate dehydration or other conditions"
            else:
                status = "‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø" if is_hindi else "Normal"
                analysis += f"*Hemoglobin: {hgb} g/dL - {status}*\n"
        
        if 'wbc' in extracted_values:
            wbc = int(extracted_values['wbc'])
            if wbc > 11000:
                status = "‡§â‡§ö‡•ç‡§ö" if is_hindi else "High"
                analysis += f"*White Blood Cells: {wbc:,} cells/ŒºL - {status}*\n"
                analysis += "‚Ä¢ ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£ ‡§Ø‡§æ ‡§∏‡•Ç‡§ú‡§®" if is_hindi else "‚Ä¢ Possible infection or inflammation"
            elif wbc < 4500:
                status = "‡§ï‡§Æ" if is_hindi else "Low"
                analysis += f"*White Blood Cells: {wbc:,} cells/ŒºL - {status}*\n"
                analysis += "‚Ä¢ ‡§™‡•ç‡§∞‡§§‡§ø‡§∞‡§ï‡•ç‡§∑‡§æ ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§∏‡§Ç‡§ï‡•á‡§§ ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à" if is_hindi else "‚Ä¢ May indicate immune system issues"
            else:
                status = "‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø" if is_hindi else "Normal"
                analysis += f"*White Blood Cells: {wbc:,} cells/ŒºL - {status}*\n"
    
    elif test_type == "Lipid Profile":
        if 'cholesterol' in extracted_values:
            chol = int(extracted_values['cholesterol'])
            if chol > 200:
                status = "‡§â‡§ö‡•ç‡§ö" if is_hindi else "High"
                analysis += f"*Total Cholesterol: {chol} mg/dL - {status}*\n"
                analysis += "‚Ä¢ ‡§π‡•É‡§¶‡§Ø ‡§∞‡•ã‡§ó ‡§ï‡§æ ‡§¨‡§¢‡§º‡§æ ‡§ú‡•ã‡§ñ‡§ø‡§Æ - ‡§Ü‡§π‡§æ‡§∞ ‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§® ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç" if is_hindi else "‚Ä¢ Increased heart disease risk - consider diet changes"
            else:
                status = "‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø" if is_hindi else "Normal"
                analysis += f"*Total Cholesterol: {chol} mg/dL - {status}*\n"
        
        if 'ldl' in extracted_values:
            ldl = int(extracted_values['ldl'])
            if ldl > 100:
                status = "‡§â‡§ö‡•ç‡§ö" if is_hindi else "High"
                analysis += f"*LDL: {ldl} mg/dL - {status}*\n"
                analysis += "‚Ä¢ ‡§ú‡•Ä‡§µ‡§®‡§∂‡•à‡§≤‡•Ä ‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§® ‡§î‡§∞ ‡§¶‡§µ‡§æ ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç" if is_hindi else "‚Ä¢ Consider lifestyle changes and medication"
            else:
                status = "‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø" if is_hindi else "Normal"
                analysis += f"*LDL: {ldl} mg/dL - {status}*\n"
    
    elif test_type == "Thyroid":
        if 'tsh' in extracted_values:
            tsh = float(extracted_values['tsh'])
            if tsh > 4.0:
                status = "‡§â‡§ö‡•ç‡§ö" if is_hindi else "High"
                analysis += f"*TSH: {tsh} mIU/L - {status}*\n"
                analysis += "‚Ä¢ ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§π‡§æ‡§á‡§™‡•ã‡§•‡§æ‡§Ø‡§∞‡•â‡§Ø‡§°‡§ø‡§ú‡•ç‡§Æ - ‡§è‡§Ç‡§°‡•ã‡§ï‡•ç‡§∞‡§ø‡§®‡•ã‡§≤‡•â‡§ú‡§ø‡§∏‡•ç‡§ü ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç" if is_hindi else "‚Ä¢ Possible hypothyroidism - consult endocrinologist"
            elif tsh < 0.4:
                status = "‡§ï‡§Æ" if is_hindi else "Low"
                analysis += f"*TSH: {tsh} mIU/L - {status}*\n"
                analysis += "‚Ä¢ ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§π‡§æ‡§á‡§™‡§∞‡§•‡§æ‡§Ø‡§∞‡•â‡§Ø‡§°‡§ø‡§ú‡•ç‡§Æ - ‡§è‡§Ç‡§°‡•ã‡§ï‡•ç‡§∞‡§ø‡§®‡•ã‡§≤‡•â‡§ú‡§ø‡§∏‡•ç‡§ü ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç" if is_hindi else "‚Ä¢ Possible hyperthyroidism - consult endocrinologist"
            else:
                status = "‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø" if is_hindi else "Normal"
                analysis += f"*TSH: {tsh} mIU/L - {status}*\n"
    
    elif test_type == "Diabetes":
        if 'glucose' in extracted_values:
            glucose = int(extracted_values['glucose'])
            if glucose > 126:
                status = "‡§â‡§ö‡•ç‡§ö" if is_hindi else "High"
                analysis += f"*Fasting Glucose: {glucose} mg/dL - {status}*\n"
                analysis += "‚Ä¢ ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§Æ‡§ß‡•Å‡§Æ‡•á‡§π - ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç" if is_hindi else "‚Ä¢ Possible diabetes - consult doctor immediately"
            elif glucose > 100:
                status = "‡§∏‡•Ä‡§Æ‡§æ ‡§∞‡•á‡§ñ‡§æ" if is_hindi else "Borderline"
                analysis += f"*Fasting Glucose: {glucose} mg/dL - {status}*\n"
                analysis += "‚Ä¢ ‡§™‡•ç‡§∞‡•Ä‡§°‡§æ‡§Ø‡§¨‡§ø‡§ü‡•Ä‡§ú - ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§î‡§∞ ‡§ú‡•Ä‡§µ‡§®‡§∂‡•à‡§≤‡•Ä ‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§®" if is_hindi else "‚Ä¢ Prediabetes - monitor and lifestyle changes"
            else:
                status = "‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø" if is_hindi else "Normal"
                analysis += f"*Fasting Glucose: {glucose} mg/dL - {status}*\n"
    
    return analysis

def generate_fallback_explanation(text, detected_tests, target_language="English"):
    """Generate a comprehensive medical explanation without API calls"""
    
    # Extract actual values from the medical report
    extracted_values = extract_medical_values(text)
    
    # Comprehensive medical explanations for common tests
    explanations = {
        "CBC": {
            "English": """ü©∏ *Complete Blood Count (CBC) Analysis*

*What it measures:*
‚Ä¢ Red blood cells (RBC) - carry oxygen throughout your body
‚Ä¢ White blood cells (WBC) - fight infections and diseases
‚Ä¢ Hemoglobin (Hgb) - protein that carries oxygen in red blood cells
‚Ä¢ Hematocrit (Hct) - percentage of blood made up by red blood cells
‚Ä¢ Platelets - help with blood clotting

*Normal ranges:*
‚Ä¢ Hemoglobin: 12-16 g/dL (women), 14-18 g/dL (men)
‚Ä¢ White blood cells: 4,500-11,000 cells/ŒºL
‚Ä¢ Platelets: 150,000-450,000 cells/ŒºL

*What abnormal values might mean:*
‚Ä¢ Low hemoglobin: Possible anemia, iron deficiency
‚Ä¢ High WBC: Possible infection or inflammation
‚Ä¢ Low platelets: Risk of bleeding

*Recommendations:*
‚Ä¢ Eat iron-rich foods (spinach, red meat, beans)
‚Ä¢ Stay hydrated
‚Ä¢ Follow up with your doctor for detailed interpretation""",
            
            "Hindi": """ü©∏ *‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∞‡§ï‡•ç‡§§ ‡§ó‡§£‡§®‡§æ (CBC) ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£*

*‡§Ø‡§π ‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡§æ‡§™‡§§‡§æ ‡§π‡•à:*
‚Ä¢ ‡§≤‡§æ‡§≤ ‡§∞‡§ï‡•ç‡§§ ‡§ï‡•ã‡§∂‡§ø‡§ï‡§æ‡§è‡§Ç (RBC) - ‡§Ü‡§™‡§ï‡•á ‡§∂‡§∞‡•Ä‡§∞ ‡§Æ‡•á‡§Ç ‡§ë‡§ï‡•ç‡§∏‡•Ä‡§ú‡§® ‡§≤‡•á ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à‡§Ç
‚Ä¢ ‡§∏‡§´‡•á‡§¶ ‡§∞‡§ï‡•ç‡§§ ‡§ï‡•ã‡§∂‡§ø‡§ï‡§æ‡§è‡§Ç (WBC) - ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£ ‡§î‡§∞ ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§∏‡•á ‡§≤‡§°‡§º‡§§‡•Ä ‡§π‡•à‡§Ç
‚Ä¢ ‡§π‡•Ä‡§Æ‡•ã‡§ó‡•ç‡§≤‡•ã‡§¨‡§ø‡§® (Hgb) - ‡§≤‡§æ‡§≤ ‡§∞‡§ï‡•ç‡§§ ‡§ï‡•ã‡§∂‡§ø‡§ï‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç ‡§ë‡§ï‡•ç‡§∏‡•Ä‡§ú‡§® ‡§≤‡•á ‡§ú‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§™‡•ç‡§∞‡•ã‡§ü‡•Ä‡§®
‚Ä¢ ‡§π‡•á‡§Æ‡§æ‡§ü‡•ã‡§ï‡•ç‡§∞‡§ø‡§ü (Hct) - ‡§≤‡§æ‡§≤ ‡§∞‡§ï‡•ç‡§§ ‡§ï‡•ã‡§∂‡§ø‡§ï‡§æ‡§ì‡§Ç ‡§∏‡•á ‡§¨‡§®‡•á ‡§∞‡§ï‡•ç‡§§ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§
‚Ä¢ ‡§™‡•ç‡§≤‡•á‡§ü‡§≤‡•á‡§ü‡•ç‡§∏ - ‡§∞‡§ï‡•ç‡§§ ‡§ï‡•á ‡§•‡§ï‡•ç‡§ï‡•á ‡§ú‡§Æ‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç

*‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡•Ä‡§Æ‡§æ:*
‚Ä¢ ‡§π‡•Ä‡§Æ‡•ã‡§ó‡•ç‡§≤‡•ã‡§¨‡§ø‡§®: 12-16 g/dL (‡§Æ‡§π‡§ø‡§≤‡§æ‡§è‡§Ç), 14-18 g/dL (‡§™‡•Å‡§∞‡•Å‡§∑)
‚Ä¢ ‡§∏‡§´‡•á‡§¶ ‡§∞‡§ï‡•ç‡§§ ‡§ï‡•ã‡§∂‡§ø‡§ï‡§æ‡§è‡§Ç: 4,500-11,000 cells/ŒºL
‚Ä¢ ‡§™‡•ç‡§≤‡•á‡§ü‡§≤‡•á‡§ü‡•ç‡§∏: 150,000-450,000 cells/ŒºL

*‡§Ö‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨:*
‚Ä¢ ‡§ï‡§Æ ‡§π‡•Ä‡§Æ‡•ã‡§ó‡•ç‡§≤‡•ã‡§¨‡§ø‡§®: ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§è‡§®‡•Ä‡§Æ‡§ø‡§Ø‡§æ, ‡§Ü‡§Ø‡§∞‡§® ‡§ï‡•Ä ‡§ï‡§Æ‡•Ä
‚Ä¢ ‡§â‡§ö‡•ç‡§ö WBC: ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£ ‡§Ø‡§æ ‡§∏‡•Ç‡§ú‡§®
‚Ä¢ ‡§ï‡§Æ ‡§™‡•ç‡§≤‡•á‡§ü‡§≤‡•á‡§ü‡•ç‡§∏: ‡§∞‡§ï‡•ç‡§§‡§∏‡•ç‡§∞‡§æ‡§µ ‡§ï‡§æ ‡§ú‡•ã‡§ñ‡§ø‡§Æ

*‡§∏‡•Å‡§ù‡§æ‡§µ:*
‚Ä¢ ‡§Ü‡§Ø‡§∞‡§® ‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§≠‡•ã‡§ú‡§® ‡§ñ‡§æ‡§è‡§Ç (‡§™‡§æ‡§≤‡§ï, ‡§≤‡§æ‡§≤ ‡§Æ‡§æ‡§Ç‡§∏, ‡§¨‡•Ä‡§®‡•ç‡§∏)
‚Ä¢ ‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§ü‡•á‡§° ‡§∞‡§π‡•á‡§Ç
‚Ä¢ ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§®‡•á ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§Æ‡§ø‡§≤‡•á‡§Ç"""
        },
        
        "Lipid Profile": {
            "English": """üíì *Lipid Profile Analysis*

*What it measures:*
‚Ä¢ Total Cholesterol - overall cholesterol level
‚Ä¢ LDL (Bad Cholesterol) - can build up in arteries
‚Ä¢ HDL (Good Cholesterol) - helps remove cholesterol from arteries
‚Ä¢ Triglycerides - stored fat used for energy

*Normal ranges:*
‚Ä¢ Total Cholesterol: < 200 mg/dL
‚Ä¢ LDL: < 100 mg/dL (optimal)
‚Ä¢ HDL: > 60 mg/dL (good)
‚Ä¢ Triglycerides: < 150 mg/dL

*What abnormal values might mean:*
‚Ä¢ High LDL: Increased heart disease risk
‚Ä¢ Low HDL: Higher risk of heart problems
‚Ä¢ High triglycerides: Risk of metabolic syndrome

*Recommendations:*
‚Ä¢ Eat heart-healthy foods (fruits, vegetables, whole grains)
‚Ä¢ Limit saturated and trans fats
‚Ä¢ Exercise regularly
‚Ä¢ Maintain healthy weight""",
            
            "Hindi": """üíì *‡§≤‡§ø‡§™‡§ø‡§° ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£*

*‡§Ø‡§π ‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡§æ‡§™‡§§‡§æ ‡§π‡•à:*
‚Ä¢ ‡§ï‡•Å‡§≤ ‡§ï‡•ã‡§≤‡•á‡§∏‡•ç‡§ü‡•ç‡§∞‡•â‡§≤ - ‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§ï‡•ã‡§≤‡•á‡§∏‡•ç‡§ü‡•ç‡§∞‡•â‡§≤ ‡§∏‡•ç‡§§‡§∞
‚Ä¢ LDL (‡§ñ‡§∞‡§æ‡§¨ ‡§ï‡•ã‡§≤‡•á‡§∏‡•ç‡§ü‡•ç‡§∞‡•â‡§≤) - ‡§ß‡§Æ‡§®‡§ø‡§Ø‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§ú‡§Æ‡§æ ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à
‚Ä¢ HDL (‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§ï‡•ã‡§≤‡•á‡§∏‡•ç‡§ü‡•ç‡§∞‡•â‡§≤) - ‡§ß‡§Æ‡§®‡§ø‡§Ø‡•ã‡§Ç ‡§∏‡•á ‡§ï‡•ã‡§≤‡•á‡§∏‡•ç‡§ü‡•ç‡§∞‡•â‡§≤ ‡§π‡§ü‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
‚Ä¢ ‡§ü‡•ç‡§∞‡§æ‡§á‡§ó‡•ç‡§≤‡§ø‡§∏‡§∞‡§æ‡§á‡§°‡•ç‡§∏ - ‡§ä‡§∞‡•ç‡§ú‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡•Ä ‡§ú‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•Ä ‡§∏‡§Ç‡§ó‡•ç‡§∞‡§π‡•Ä‡§§ ‡§µ‡§∏‡§æ

*‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡•Ä‡§Æ‡§æ:*
‚Ä¢ ‡§ï‡•Å‡§≤ ‡§ï‡•ã‡§≤‡•á‡§∏‡•ç‡§ü‡•ç‡§∞‡•â‡§≤: < 200 mg/dL
‚Ä¢ LDL: < 100 mg/dL (‡§á‡§∑‡•ç‡§ü‡§§‡§Æ)
‚Ä¢ HDL: > 60 mg/dL (‡§Ö‡§ö‡•ç‡§õ‡§æ)
‚Ä¢ ‡§ü‡•ç‡§∞‡§æ‡§á‡§ó‡•ç‡§≤‡§ø‡§∏‡§∞‡§æ‡§á‡§°‡•ç‡§∏: < 150 mg/dL

*‡§Ö‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨:*
‚Ä¢ ‡§â‡§ö‡•ç‡§ö LDL: ‡§π‡•É‡§¶‡§Ø ‡§∞‡•ã‡§ó ‡§ï‡§æ ‡§¨‡§¢‡§º‡§æ ‡§ú‡•ã‡§ñ‡§ø‡§Æ
‚Ä¢ ‡§ï‡§Æ HDL: ‡§π‡•É‡§¶‡§Ø ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§Ö‡§ß‡§ø‡§ï ‡§ú‡•ã‡§ñ‡§ø‡§Æ
‚Ä¢ ‡§â‡§ö‡•ç‡§ö ‡§ü‡•ç‡§∞‡§æ‡§á‡§ó‡•ç‡§≤‡§ø‡§∏‡§∞‡§æ‡§á‡§°‡•ç‡§∏: ‡§Æ‡•á‡§ü‡§æ‡§¨‡•â‡§≤‡§ø‡§ï ‡§∏‡§ø‡§Ç‡§°‡•ç‡§∞‡•ã‡§Æ ‡§ï‡§æ ‡§ú‡•ã‡§ñ‡§ø‡§Æ

*‡§∏‡•Å‡§ù‡§æ‡§µ:*
‚Ä¢ ‡§π‡•É‡§¶‡§Ø-‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§≠‡•ã‡§ú‡§® ‡§ñ‡§æ‡§è‡§Ç (‡§´‡§≤, ‡§∏‡§¨‡•ç‡§ú‡§ø‡§Ø‡§æ‡§Ç, ‡§∏‡§æ‡§¨‡•Å‡§§ ‡§Ö‡§®‡§æ‡§ú)
‚Ä¢ ‡§∏‡§Ç‡§§‡•É‡§™‡•ç‡§§ ‡§î‡§∞ ‡§ü‡•ç‡§∞‡§æ‡§Ç‡§∏ ‡§µ‡§∏‡§æ ‡§∏‡•Ä‡§Æ‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§µ‡§ú‡§® ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç"""
        },
        
        "Liver Function": {
            "English": """ü´Ä *Liver Function Tests*

*What it measures:*
‚Ä¢ ALT/SGPT - enzyme that indicates liver damage
‚Ä¢ AST/SGOT - enzyme found in liver and other organs
‚Ä¢ Bilirubin - waste product processed by liver
‚Ä¢ ALP - enzyme related to bile ducts

*Normal ranges:*
‚Ä¢ ALT: 7-56 U/L
‚Ä¢ AST: 10-40 U/L
‚Ä¢ Bilirubin: 0.1-1.2 mg/dL
‚Ä¢ ALP: 44-147 U/L

*What abnormal values might mean:*
‚Ä¢ High ALT/AST: Possible liver damage or inflammation
‚Ä¢ High bilirubin: Possible liver or bile duct problems
‚Ä¢ High ALP: Possible bile duct obstruction

*Recommendations:*
‚Ä¢ Avoid alcohol and unnecessary medications
‚Ä¢ Eat liver-friendly foods (leafy greens, nuts, fish)
‚Ä¢ Stay hydrated
‚Ä¢ Consult your doctor for further evaluation""",
            
            "Hindi": """ü´Ä *‡§Ø‡§ï‡•É‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£*

*‡§Ø‡§π ‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡§æ‡§™‡§§‡§æ ‡§π‡•à:*
‚Ä¢ ALT/SGPT - ‡§è‡§Ç‡§ú‡§æ‡§á‡§Æ ‡§ú‡•ã ‡§Ø‡§ï‡•É‡§§ ‡§ï‡•ç‡§∑‡§§‡§ø ‡§ï‡§æ ‡§∏‡§Ç‡§ï‡•á‡§§ ‡§¶‡•á‡§§‡§æ ‡§π‡•à
‚Ä¢ AST/SGOT - ‡§Ø‡§ï‡•É‡§§ ‡§î‡§∞ ‡§Ö‡§®‡•ç‡§Ø ‡§Ö‡§Ç‡§ó‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§™‡§æ‡§Ø‡§æ ‡§ú‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§è‡§Ç‡§ú‡§æ‡§á‡§Æ
‚Ä¢ ‡§¨‡§ø‡§≤‡•Ä‡§∞‡•Å‡§¨‡§ø‡§® - ‡§Ø‡§ï‡•É‡§§ ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§∏‡§Ç‡§∏‡§æ‡§ß‡§ø‡§§ ‡§Ö‡§™‡§∂‡§ø‡§∑‡•ç‡§ü ‡§â‡§§‡•ç‡§™‡§æ‡§¶
‚Ä¢ ALP - ‡§™‡§ø‡§§‡•ç‡§§ ‡§®‡§≤‡§ø‡§ï‡§æ‡§ì‡§Ç ‡§∏‡•á ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§è‡§Ç‡§ú‡§æ‡§á‡§Æ

*‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡•Ä‡§Æ‡§æ:*
‚Ä¢ ALT: 7-56 U/L
‚Ä¢ AST: 10-40 U/L
‚Ä¢ ‡§¨‡§ø‡§≤‡•Ä‡§∞‡•Å‡§¨‡§ø‡§®: 0.1-1.2 mg/dL
‚Ä¢ ALP: 44-147 U/L

*‡§Ö‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨:*
‚Ä¢ ‡§â‡§ö‡•ç‡§ö ALT/AST: ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§Ø‡§ï‡•É‡§§ ‡§ï‡•ç‡§∑‡§§‡§ø ‡§Ø‡§æ ‡§∏‡•Ç‡§ú‡§®
‚Ä¢ ‡§â‡§ö‡•ç‡§ö ‡§¨‡§ø‡§≤‡•Ä‡§∞‡•Å‡§¨‡§ø‡§®: ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§Ø‡§ï‡•É‡§§ ‡§Ø‡§æ ‡§™‡§ø‡§§‡•ç‡§§ ‡§®‡§≤‡§ø‡§ï‡§æ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§è‡§Ç
‚Ä¢ ‡§â‡§ö‡•ç‡§ö ALP: ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§™‡§ø‡§§‡•ç‡§§ ‡§®‡§≤‡§ø‡§ï‡§æ ‡§Ö‡§µ‡§∞‡•ã‡§ß

*‡§∏‡•Å‡§ù‡§æ‡§µ:*
‚Ä¢ ‡§∂‡§∞‡§æ‡§¨ ‡§î‡§∞ ‡§Ö‡§®‡§æ‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§¶‡§µ‡§æ‡§ì‡§Ç ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç
‚Ä¢ ‡§Ø‡§ï‡•É‡§§-‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§≠‡•ã‡§ú‡§® ‡§ñ‡§æ‡§è‡§Ç (‡§™‡§§‡•ç‡§§‡•á‡§¶‡§æ‡§∞ ‡§∏‡§æ‡§ó, ‡§®‡§ü‡•ç‡§∏, ‡§Æ‡§õ‡§≤‡•Ä)
‚Ä¢ ‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§ü‡•á‡§° ‡§∞‡§π‡•á‡§Ç
‚Ä¢ ‡§Ü‡§ó‡•á ‡§ï‡•á ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§®‡•á ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç"""
        },
        
        "Thyroid": {
            "English": """ü¶ã *Thyroid Function Tests*

*What it measures:*
‚Ä¢ TSH (Thyroid Stimulating Hormone) - controls thyroid function
‚Ä¢ T3 (Triiodothyronine) - active thyroid hormone
‚Ä¢ T4 (Thyroxine) - main thyroid hormone

*Normal ranges:*
‚Ä¢ TSH: 0.4-4.0 mIU/L
‚Ä¢ T3: 80-200 ng/dL
‚Ä¢ T4: 4.5-12.5 Œºg/dL

*What abnormal values might mean:*
‚Ä¢ High TSH: Possible hypothyroidism (underactive thyroid)
‚Ä¢ Low TSH: Possible hyperthyroidism (overactive thyroid)
‚Ä¢ High T3/T4: Possible hyperthyroidism
‚Ä¢ Low T3/T4: Possible hypothyroidism

*Recommendations:*
‚Ä¢ Follow up with an endocrinologist
‚Ä¢ Monitor symptoms (fatigue, weight changes, mood)
‚Ä¢ Take medications as prescribed
‚Ä¢ Regular follow-up blood tests""",
            
            "Hindi": """ü¶ã *‡§•‡§æ‡§Ø‡§∞‡•â‡§Ø‡§° ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£*

*‡§Ø‡§π ‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡§æ‡§™‡§§‡§æ ‡§π‡•à:*
‚Ä¢ TSH (‡§•‡§æ‡§Ø‡§∞‡•â‡§Ø‡§° ‡§∏‡•ç‡§ü‡§ø‡§Æ‡•Å‡§≤‡•á‡§ü‡§ø‡§Ç‡§ó ‡§π‡§æ‡§∞‡•ç‡§Æ‡•ã‡§®) - ‡§•‡§æ‡§Ø‡§∞‡•â‡§Ø‡§° ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§ï‡•ã ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
‚Ä¢ T3 (‡§ü‡•ç‡§∞‡§æ‡§à‡§Ü‡§Ø‡•ã‡§°‡•ã‡§•‡§æ‡§Ø‡§∞‡•ã‡§®‡§ø‡§®) - ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§•‡§æ‡§Ø‡§∞‡•â‡§Ø‡§° ‡§π‡§æ‡§∞‡•ç‡§Æ‡•ã‡§®
‚Ä¢ T4 (‡§•‡§æ‡§Ø‡§∞‡•ã‡§ï‡•ç‡§∏‡§ø‡§®) - ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§•‡§æ‡§Ø‡§∞‡•â‡§Ø‡§° ‡§π‡§æ‡§∞‡•ç‡§Æ‡•ã‡§®

*‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡•Ä‡§Æ‡§æ:*
‚Ä¢ TSH: 0.4-4.0 mIU/L
‚Ä¢ T3: 80-200 ng/dL
‚Ä¢ T4: 4.5-12.5 Œºg/dL

*‡§Ö‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨:*
‚Ä¢ ‡§â‡§ö‡•ç‡§ö TSH: ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§π‡§æ‡§á‡§™‡•ã‡§•‡§æ‡§Ø‡§∞‡•â‡§Ø‡§°‡§ø‡§ú‡•ç‡§Æ (‡§Ö‡§Ç‡§°‡§∞‡§è‡§ï‡•ç‡§ü‡§ø‡§µ ‡§•‡§æ‡§Ø‡§∞‡•â‡§Ø‡§°)
‚Ä¢ ‡§ï‡§Æ TSH: ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§π‡§æ‡§á‡§™‡§∞‡§•‡§æ‡§Ø‡§∞‡•â‡§Ø‡§°‡§ø‡§ú‡•ç‡§Æ (‡§ì‡§µ‡§∞‡§è‡§ï‡•ç‡§ü‡§ø‡§µ ‡§•‡§æ‡§Ø‡§∞‡•â‡§Ø‡§°)
‚Ä¢ ‡§â‡§ö‡•ç‡§ö T3/T4: ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§π‡§æ‡§á‡§™‡§∞‡§•‡§æ‡§Ø‡§∞‡•â‡§Ø‡§°‡§ø‡§ú‡•ç‡§Æ
‚Ä¢ ‡§ï‡§Æ T3/T4: ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§π‡§æ‡§á‡§™‡•ã‡§•‡§æ‡§Ø‡§∞‡•â‡§Ø‡§°‡§ø‡§ú‡•ç‡§Æ

*‡§∏‡•Å‡§ù‡§æ‡§µ:*
‚Ä¢ ‡§è‡§Ç‡§°‡•ã‡§ï‡•ç‡§∞‡§ø‡§®‡•ã‡§≤‡•â‡§ú‡§ø‡§∏‡•ç‡§ü ‡§∏‡•á ‡§´‡•â‡§≤‡•ã-‡§Ö‡§™ ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡•Ä ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§ï‡§∞‡•á‡§Ç (‡§•‡§ï‡§æ‡§®, ‡§µ‡§ú‡§® ‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§®, ‡§Æ‡•Ç‡§°)
‚Ä¢ ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§ ‡§¶‡§µ‡§æ‡§è‡§Ç ‡§≤‡•á‡§Ç
‚Ä¢ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§´‡•â‡§≤‡•ã-‡§Ö‡§™ ‡§∞‡§ï‡•ç‡§§ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£"""
        },
        
        "Diabetes": {
            "English": """üçØ *Diabetes Tests*

*What it measures:*
‚Ä¢ Fasting Glucose - blood sugar after 8+ hours without food
‚Ä¢ HbA1c - average blood sugar over 2-3 months
‚Ä¢ Random Glucose - blood sugar at any time

*Normal ranges:*
‚Ä¢ Fasting Glucose: 70-100 mg/dL
‚Ä¢ HbA1c: < 5.7%
‚Ä¢ Random Glucose: < 140 mg/dL

*What abnormal values might mean:*
‚Ä¢ High fasting glucose: Possible diabetes or prediabetes
‚Ä¢ High HbA1c: Poor long-term blood sugar control
‚Ä¢ High random glucose: Possible diabetes

*Recommendations:*
‚Ä¢ Monitor blood sugar regularly
‚Ä¢ Follow a diabetic-friendly diet
‚Ä¢ Exercise regularly
‚Ä¢ Take medications as prescribed
‚Ä¢ Regular check-ups with your doctor""",
            
            "Hindi": """üçØ *‡§Æ‡§ß‡•Å‡§Æ‡•á‡§π ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£*

*‡§Ø‡§π ‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡§æ‡§™‡§§‡§æ ‡§π‡•à:*
‚Ä¢ ‡§´‡§æ‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§ó‡•ç‡§≤‡•Ç‡§ï‡•ã‡§ú - 8+ ‡§ò‡§Ç‡§ü‡•á ‡§¨‡§ø‡§®‡§æ ‡§≠‡•ã‡§ú‡§® ‡§ï‡•á ‡§∞‡§ï‡•ç‡§§ ‡§∂‡§∞‡•ç‡§ï‡§∞‡§æ
‚Ä¢ HbA1c - 2-3 ‡§Æ‡§π‡•Ä‡§®‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§î‡§∏‡§§ ‡§∞‡§ï‡•ç‡§§ ‡§∂‡§∞‡•ç‡§ï‡§∞‡§æ
‚Ä¢ ‡§∞‡•à‡§Ç‡§°‡§Æ ‡§ó‡•ç‡§≤‡•Ç‡§ï‡•ã‡§ú - ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§∏‡§Æ‡§Ø ‡§∞‡§ï‡•ç‡§§ ‡§∂‡§∞‡•ç‡§ï‡§∞‡§æ

*‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡•Ä‡§Æ‡§æ:*
‚Ä¢ ‡§´‡§æ‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§ó‡•ç‡§≤‡•Ç‡§ï‡•ã‡§ú: 70-100 mg/dL
‚Ä¢ HbA1c: < 5.7%
‚Ä¢ ‡§∞‡•à‡§Ç‡§°‡§Æ ‡§ó‡•ç‡§≤‡•Ç‡§ï‡•ã‡§ú: < 140 mg/dL

*‡§Ö‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨:*
‚Ä¢ ‡§â‡§ö‡•ç‡§ö ‡§´‡§æ‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§ó‡•ç‡§≤‡•Ç‡§ï‡•ã‡§ú: ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§Æ‡§ß‡•Å‡§Æ‡•á‡§π ‡§Ø‡§æ ‡§™‡•ç‡§∞‡•Ä‡§°‡§æ‡§Ø‡§¨‡§ø‡§ü‡•Ä‡§ú
‚Ä¢ ‡§â‡§ö‡•ç‡§ö HbA1c: ‡§ñ‡§∞‡§æ‡§¨ ‡§¶‡•Ä‡§∞‡•ç‡§ò‡§ï‡§æ‡§≤‡§ø‡§ï ‡§∞‡§ï‡•ç‡§§ ‡§∂‡§∞‡•ç‡§ï‡§∞‡§æ ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£
‚Ä¢ ‡§â‡§ö‡•ç‡§ö ‡§∞‡•à‡§Ç‡§°‡§Æ ‡§ó‡•ç‡§≤‡•Ç‡§ï‡•ã‡§ú: ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§Æ‡§ß‡•Å‡§Æ‡•á‡§π

*‡§∏‡•Å‡§ù‡§æ‡§µ:*
‚Ä¢ ‡§∞‡§ï‡•ç‡§§ ‡§∂‡§∞‡•ç‡§ï‡§∞‡§æ ‡§ï‡•Ä ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§Æ‡§ß‡•Å‡§Æ‡•á‡§π-‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤ ‡§Ü‡§π‡§æ‡§∞ ‡§ï‡§æ ‡§™‡§æ‡§≤‡§® ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§ ‡§¶‡§µ‡§æ‡§è‡§Ç ‡§≤‡•á‡§Ç
‚Ä¢ ‡§Ö‡§™‡§®‡•á ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§ú‡§æ‡§Ç‡§ö"""
        },
        
        "Kidney Function": {
            "English": """ü´ò *Kidney Function Tests*

*What it measures:*
‚Ä¢ Creatinine - waste product filtered by kidneys
‚Ä¢ BUN (Blood Urea Nitrogen) - nitrogen waste in blood
‚Ä¢ eGFR - estimated kidney filtering function
‚Ä¢ Uric Acid - waste product from protein breakdown

*Normal ranges:*
‚Ä¢ Creatinine: 0.6-1.2 mg/dL (men), 0.5-1.1 mg/dL (women)
‚Ä¢ BUN: 7-20 mg/dL
‚Ä¢ eGFR: > 60 mL/min/1.73m¬≤
‚Ä¢ Uric Acid: 3.5-7.0 mg/dL (men), 2.5-6.0 mg/dL (women)

*What abnormal values might mean:*
‚Ä¢ High creatinine: Possible kidney dysfunction
‚Ä¢ High BUN: Possible kidney problems or dehydration
‚Ä¢ Low eGFR: Reduced kidney function
‚Ä¢ High uric acid: Possible gout or kidney stones

*Recommendations:*
‚Ä¢ Stay well hydrated
‚Ä¢ Limit protein intake if advised
‚Ä¢ Control blood pressure and diabetes
‚Ä¢ Avoid excessive salt
‚Ä¢ Regular follow-up with nephrologist""",
            
            "Hindi": """ü´ò *‡§ó‡•Å‡§∞‡•ç‡§¶‡•á ‡§ï‡•á ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£*

*‡§Ø‡§π ‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡§æ‡§™‡§§‡§æ ‡§π‡•à:*
‚Ä¢ ‡§ï‡•ç‡§∞‡§ø‡§è‡§ü‡§ø‡§®‡§ø‡§® - ‡§ó‡•Å‡§∞‡•ç‡§¶‡•á ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§´‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§Ö‡§™‡§∂‡§ø‡§∑‡•ç‡§ü ‡§â‡§§‡•ç‡§™‡§æ‡§¶
‚Ä¢ BUN (‡§¨‡•ç‡§≤‡§° ‡§Ø‡•Ç‡§∞‡§ø‡§Ø‡§æ ‡§®‡§æ‡§á‡§ü‡•ç‡§∞‡•ã‡§ú‡§®) - ‡§∞‡§ï‡•ç‡§§ ‡§Æ‡•á‡§Ç ‡§®‡§æ‡§á‡§ü‡•ç‡§∞‡•ã‡§ú‡§® ‡§Ö‡§™‡§∂‡§ø‡§∑‡•ç‡§ü
‚Ä¢ eGFR - ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§ó‡•Å‡§∞‡•ç‡§¶‡•á ‡§ï‡•Ä ‡§´‡§ø‡§≤‡•ç‡§ü‡§∞‡§ø‡§Ç‡§ó ‡§ï‡§æ‡§∞‡•ç‡§Ø
‚Ä¢ ‡§Ø‡•Ç‡§∞‡§ø‡§ï ‡§è‡§∏‡§ø‡§° - ‡§™‡•ç‡§∞‡•ã‡§ü‡•Ä‡§® ‡§ü‡•Ç‡§ü‡§®‡•á ‡§∏‡•á ‡§Ö‡§™‡§∂‡§ø‡§∑‡•ç‡§ü ‡§â‡§§‡•ç‡§™‡§æ‡§¶

*‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡•Ä‡§Æ‡§æ:*
‚Ä¢ ‡§ï‡•ç‡§∞‡§ø‡§è‡§ü‡§ø‡§®‡§ø‡§®: 0.6-1.2 mg/dL (‡§™‡•Å‡§∞‡•Å‡§∑), 0.5-1.1 mg/dL (‡§Æ‡§π‡§ø‡§≤‡§æ‡§è‡§Ç)
‚Ä¢ BUN: 7-20 mg/dL
‚Ä¢ eGFR: > 60 mL/min/1.73m¬≤
‚Ä¢ ‡§Ø‡•Ç‡§∞‡§ø‡§ï ‡§è‡§∏‡§ø‡§°: 3.5-7.0 mg/dL (‡§™‡•Å‡§∞‡•Å‡§∑), 2.5-6.0 mg/dL (‡§Æ‡§π‡§ø‡§≤‡§æ‡§è‡§Ç)

*‡§Ö‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨:*
‚Ä¢ ‡§â‡§ö‡•ç‡§ö ‡§ï‡•ç‡§∞‡§ø‡§è‡§ü‡§ø‡§®‡§ø‡§®: ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§ó‡•Å‡§∞‡•ç‡§¶‡•á ‡§ï‡•Ä ‡§∂‡§ø‡§•‡§ø‡§≤‡§§‡§æ
‚Ä¢ ‡§â‡§ö‡•ç‡§ö BUN: ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§ó‡•Å‡§∞‡•ç‡§¶‡•á ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§è‡§Ç ‡§Ø‡§æ ‡§®‡§ø‡§∞‡•ç‡§ú‡§≤‡•Ä‡§ï‡§∞‡§£
‚Ä¢ ‡§ï‡§Æ eGFR: ‡§ï‡§Æ ‡§ó‡•Å‡§∞‡•ç‡§¶‡•á ‡§ï‡§æ ‡§ï‡§æ‡§∞‡•ç‡§Ø
‚Ä¢ ‡§â‡§ö‡•ç‡§ö ‡§Ø‡•Ç‡§∞‡§ø‡§ï ‡§è‡§∏‡§ø‡§°: ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§ó‡§æ‡§â‡§ü ‡§Ø‡§æ ‡§ó‡•Å‡§∞‡•ç‡§¶‡•á ‡§ï‡•Ä ‡§™‡§•‡§∞‡•Ä

*‡§∏‡•Å‡§ù‡§æ‡§µ:*
‚Ä¢ ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§§‡§∞‡§π ‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§ü‡•á‡§° ‡§∞‡§π‡•á‡§Ç
‚Ä¢ ‡§∏‡§≤‡§æ‡§π ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•ã ‡§§‡•ã ‡§™‡•ç‡§∞‡•ã‡§ü‡•Ä‡§® ‡§∏‡•á‡§µ‡§® ‡§∏‡•Ä‡§Æ‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§∞‡§ï‡•ç‡§§‡§ö‡§æ‡§™ ‡§î‡§∞ ‡§Æ‡§ß‡•Å‡§Æ‡•á‡§π ‡§ï‡•ã ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§Ö‡§§‡•ç‡§Ø‡§ß‡§ø‡§ï ‡§®‡§Æ‡§ï ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç
‚Ä¢ ‡§®‡•á‡§´‡•ç‡§∞‡•ã‡§≤‡•â‡§ú‡§ø‡§∏‡•ç‡§ü ‡§ï‡•á ‡§∏‡§æ‡§• ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§´‡•â‡§≤‡•ã-‡§Ö‡§™"""
        },
        
        "Cardiac": {
            "English": """‚ù§ *Cardiac Markers*

*What it measures:*
‚Ä¢ Troponin - protein released during heart muscle damage
‚Ä¢ CK-MB - enzyme released from heart muscle
‚Ä¢ BNP/NT-proBNP - hormone indicating heart failure
‚Ä¢ Myoglobin - protein released from muscle damage

*Normal ranges:*
‚Ä¢ Troponin I: < 0.04 ng/mL
‚Ä¢ Troponin T: < 0.01 ng/mL
‚Ä¢ CK-MB: < 5.0 ng/mL
‚Ä¢ BNP: < 100 pg/mL
‚Ä¢ Myoglobin: < 90 ng/mL

*What abnormal values might mean:*
‚Ä¢ High troponin: Possible heart attack or heart damage
‚Ä¢ High CK-MB: Heart muscle injury
‚Ä¢ High BNP: Possible heart failure
‚Ä¢ High myoglobin: Muscle damage (heart or other muscles)

*Recommendations:*
‚Ä¢ Seek immediate medical attention if high
‚Ä¢ Follow cardiac rehabilitation program
‚Ä¢ Take prescribed heart medications
‚Ä¢ Maintain heart-healthy lifestyle
‚Ä¢ Regular cardiology follow-up""",
            
            "Hindi": """‚ù§ *‡§π‡•É‡§¶‡§Ø ‡§Æ‡§æ‡§∞‡•ç‡§ï‡§∞*

*‡§Ø‡§π ‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡§æ‡§™‡§§‡§æ ‡§π‡•à:*
‚Ä¢ ‡§ü‡•ç‡§∞‡•ã‡§™‡•ã‡§®‡§ø‡§® - ‡§π‡•É‡§¶‡§Ø ‡§ï‡•Ä ‡§Æ‡§æ‡§Ç‡§∏‡§™‡•á‡§∂‡•Ä ‡§ï‡•ç‡§∑‡§§‡§ø ‡§ï‡•á ‡§¶‡•å‡§∞‡§æ‡§® ‡§ú‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡•ã‡§ü‡•Ä‡§®
‚Ä¢ CK-MB - ‡§π‡•É‡§¶‡§Ø ‡§ï‡•Ä ‡§Æ‡§æ‡§Ç‡§∏‡§™‡•á‡§∂‡•Ä ‡§∏‡•á ‡§ú‡§æ‡§∞‡•Ä ‡§è‡§Ç‡§ú‡§æ‡§á‡§Æ
‚Ä¢ BNP/NT-proBNP - ‡§π‡•É‡§¶‡§Ø ‡§ï‡•Ä ‡§µ‡§ø‡§´‡§≤‡§§‡§æ ‡§ï‡§æ ‡§∏‡§Ç‡§ï‡•á‡§§ ‡§¶‡•á‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§π‡§æ‡§∞‡•ç‡§Æ‡•ã‡§®
‚Ä¢ ‡§Æ‡§æ‡§Ø‡•ã‡§ó‡•ç‡§≤‡•ã‡§¨‡§ø‡§® - ‡§Æ‡§æ‡§Ç‡§∏‡§™‡•á‡§∂‡•Ä ‡§ï‡•ç‡§∑‡§§‡§ø ‡§∏‡•á ‡§ú‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡•ã‡§ü‡•Ä‡§®

*‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡•Ä‡§Æ‡§æ:*
‚Ä¢ ‡§ü‡•ç‡§∞‡•ã‡§™‡•ã‡§®‡§ø‡§® I: < 0.04 ng/mL
‚Ä¢ ‡§ü‡•ç‡§∞‡•ã‡§™‡•ã‡§®‡§ø‡§® T: < 0.01 ng/mL
‚Ä¢ CK-MB: < 5.0 ng/mL
‚Ä¢ BNP: < 100 pg/mL
‚Ä¢ ‡§Æ‡§æ‡§Ø‡•ã‡§ó‡•ç‡§≤‡•ã‡§¨‡§ø‡§®: < 90 ng/mL

*‡§Ö‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨:*
‚Ä¢ ‡§â‡§ö‡•ç‡§ö ‡§ü‡•ç‡§∞‡•ã‡§™‡•ã‡§®‡§ø‡§®: ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§π‡•É‡§¶‡§Ø‡§æ‡§ò‡§æ‡§§ ‡§Ø‡§æ ‡§π‡•É‡§¶‡§Ø ‡§ï‡•ç‡§∑‡§§‡§ø
‚Ä¢ ‡§â‡§ö‡•ç‡§ö CK-MB: ‡§π‡•É‡§¶‡§Ø ‡§ï‡•Ä ‡§Æ‡§æ‡§Ç‡§∏‡§™‡•á‡§∂‡•Ä ‡§ö‡•ã‡§ü
‚Ä¢ ‡§â‡§ö‡•ç‡§ö BNP: ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§π‡•É‡§¶‡§Ø ‡§ï‡•Ä ‡§µ‡§ø‡§´‡§≤‡§§‡§æ
‚Ä¢ ‡§â‡§ö‡•ç‡§ö ‡§Æ‡§æ‡§Ø‡•ã‡§ó‡•ç‡§≤‡•ã‡§¨‡§ø‡§®: ‡§Æ‡§æ‡§Ç‡§∏‡§™‡•á‡§∂‡•Ä ‡§ï‡•ç‡§∑‡§§‡§ø (‡§π‡•É‡§¶‡§Ø ‡§Ø‡§æ ‡§Ö‡§®‡•ç‡§Ø ‡§Æ‡§æ‡§Ç‡§∏‡§™‡•á‡§∂‡§ø‡§Ø‡§æ‡§Ç)

*‡§∏‡•Å‡§ù‡§æ‡§µ:*
‚Ä¢ ‡§â‡§ö‡•ç‡§ö ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§≤‡•á‡§Ç
‚Ä¢ ‡§π‡•É‡§¶‡§Ø ‡§™‡•Å‡§®‡§∞‡•ç‡§µ‡§æ‡§∏ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ ‡§ï‡§æ ‡§™‡§æ‡§≤‡§® ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§ ‡§π‡•É‡§¶‡§Ø ‡§¶‡§µ‡§æ‡§è‡§Ç ‡§≤‡•á‡§Ç
‚Ä¢ ‡§π‡•É‡§¶‡§Ø-‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§ú‡•Ä‡§µ‡§®‡§∂‡•à‡§≤‡•Ä ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç
‚Ä¢ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§ï‡§æ‡§∞‡•ç‡§°‡§ø‡§Ø‡•ã‡§≤‡•â‡§ú‡•Ä ‡§´‡•â‡§≤‡•ã-‡§Ö‡§™"""
        },
        
        "Electrolytes": {
            "English": """‚ö° *Electrolyte Panel*

*What it measures:*
‚Ä¢ Sodium (Na) - maintains fluid balance and nerve function
‚Ä¢ Potassium (K) - essential for heart and muscle function
‚Ä¢ Chloride (Cl) - helps maintain acid-base balance
‚Ä¢ Calcium (Ca) - important for bones and muscle function
‚Ä¢ Magnesium (Mg) - supports muscle and nerve function

*Normal ranges:*
‚Ä¢ Sodium: 136-145 mEq/L
‚Ä¢ Potassium: 3.5-5.0 mEq/L
‚Ä¢ Chloride: 98-107 mEq/L
‚Ä¢ Calcium: 8.5-10.5 mg/dL
‚Ä¢ Magnesium: 1.7-2.2 mg/dL

*What abnormal values might mean:*
‚Ä¢ High sodium: Dehydration or kidney problems
‚Ä¢ Low potassium: Muscle weakness, heart rhythm issues
‚Ä¢ High calcium: Possible bone disease or parathyroid issues
‚Ä¢ Low magnesium: Muscle cramps, irregular heartbeat

*Recommendations:*
‚Ä¢ Stay well hydrated
‚Ä¢ Eat balanced diet with fruits and vegetables
‚Ä¢ Limit processed foods high in sodium
‚Ä¢ Take supplements only if prescribed
‚Ä¢ Regular monitoring if levels are abnormal""",
            
            "Hindi": """‚ö° *‡§á‡§≤‡•á‡§ï‡•ç‡§ü‡•ç‡§∞‡•ã‡§≤‡§æ‡§á‡§ü ‡§™‡•à‡§®‡§≤*

*‡§Ø‡§π ‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡§æ‡§™‡§§‡§æ ‡§π‡•à:*
‚Ä¢ ‡§∏‡•ã‡§°‡§ø‡§Ø‡§Æ (Na) - ‡§¶‡•ç‡§∞‡§µ ‡§∏‡§Ç‡§§‡•Å‡§≤‡§® ‡§î‡§∞ ‡§§‡§Ç‡§§‡•ç‡§∞‡§ø‡§ï‡§æ ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡§§‡§æ ‡§π‡•à
‚Ä¢ ‡§™‡•ã‡§ü‡•á‡§∂‡§ø‡§Ø‡§Æ (K) - ‡§π‡•É‡§¶‡§Ø ‡§î‡§∞ ‡§Æ‡§æ‡§Ç‡§∏‡§™‡•á‡§∂‡•Ä ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï
‚Ä¢ ‡§ï‡•ç‡§≤‡•ã‡§∞‡§æ‡§á‡§° (Cl) - ‡§Ö‡§Æ‡•ç‡§≤-‡§ï‡•ç‡§∑‡§æ‡§∞ ‡§∏‡§Ç‡§§‡•Å‡§≤‡§® ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
‚Ä¢ ‡§ï‡•à‡§≤‡•ç‡§∂‡§ø‡§Ø‡§Æ (Ca) - ‡§π‡§°‡•ç‡§°‡§ø‡§Ø‡•ã‡§Ç ‡§î‡§∞ ‡§Æ‡§æ‡§Ç‡§∏‡§™‡•á‡§∂‡•Ä ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£
‚Ä¢ ‡§Æ‡•à‡§ó‡•ç‡§®‡•Ä‡§∂‡§ø‡§Ø‡§Æ (Mg) - ‡§Æ‡§æ‡§Ç‡§∏‡§™‡•á‡§∂‡•Ä ‡§î‡§∞ ‡§§‡§Ç‡§§‡•ç‡§∞‡§ø‡§ï‡§æ ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§ï‡§æ ‡§∏‡§Æ‡§∞‡•ç‡§•‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•à

*‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡•Ä‡§Æ‡§æ:*
‚Ä¢ ‡§∏‡•ã‡§°‡§ø‡§Ø‡§Æ: 136-145 mEq/L
‚Ä¢ ‡§™‡•ã‡§ü‡•á‡§∂‡§ø‡§Ø‡§Æ: 3.5-5.0 mEq/L
‚Ä¢ ‡§ï‡•ç‡§≤‡•ã‡§∞‡§æ‡§á‡§°: 98-107 mEq/L
‚Ä¢ ‡§ï‡•à‡§≤‡•ç‡§∂‡§ø‡§Ø‡§Æ: 8.5-10.5 mg/dL
‚Ä¢ ‡§Æ‡•à‡§ó‡•ç‡§®‡•Ä‡§∂‡§ø‡§Ø‡§Æ: 1.7-2.2 mg/dL

*‡§Ö‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨:*
‚Ä¢ ‡§â‡§ö‡•ç‡§ö ‡§∏‡•ã‡§°‡§ø‡§Ø‡§Æ: ‡§®‡§ø‡§∞‡•ç‡§ú‡§≤‡•Ä‡§ï‡§∞‡§£ ‡§Ø‡§æ ‡§ó‡•Å‡§∞‡•ç‡§¶‡•á ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§è‡§Ç
‚Ä¢ ‡§ï‡§Æ ‡§™‡•ã‡§ü‡•á‡§∂‡§ø‡§Ø‡§Æ: ‡§Æ‡§æ‡§Ç‡§∏‡§™‡•á‡§∂‡•Ä ‡§ï‡§Æ‡§ú‡•ã‡§∞‡•Ä, ‡§π‡•É‡§¶‡§Ø ‡§§‡§æ‡§≤ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§è‡§Ç
‚Ä¢ ‡§â‡§ö‡•ç‡§ö ‡§ï‡•à‡§≤‡•ç‡§∂‡§ø‡§Ø‡§Æ: ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§π‡§°‡•ç‡§°‡•Ä ‡§∞‡•ã‡§ó ‡§Ø‡§æ ‡§™‡•à‡§∞‡§æ‡§•‡§æ‡§Ø‡§∞‡•â‡§Ø‡§° ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§è‡§Ç
‚Ä¢ ‡§ï‡§Æ ‡§Æ‡•à‡§ó‡•ç‡§®‡•Ä‡§∂‡§ø‡§Ø‡§Æ: ‡§Æ‡§æ‡§Ç‡§∏‡§™‡•á‡§∂‡•Ä ‡§ê‡§Ç‡§†‡§®, ‡§Ö‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§π‡•É‡§¶‡§Ø ‡§§‡§æ‡§≤

*‡§∏‡•Å‡§ù‡§æ‡§µ:*
‚Ä¢ ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§§‡§∞‡§π ‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§ü‡•á‡§° ‡§∞‡§π‡•á‡§Ç
‚Ä¢ ‡§´‡§≤ ‡§î‡§∞ ‡§∏‡§¨‡•ç‡§ú‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§Ü‡§π‡§æ‡§∞ ‡§≤‡•á‡§Ç
‚Ä¢ ‡§∏‡•ã‡§°‡§ø‡§Ø‡§Æ ‡§Æ‡•á‡§Ç ‡§â‡§ö‡•ç‡§ö ‡§™‡•ç‡§∞‡§∏‡§Ç‡§∏‡•ç‡§ï‡•É‡§§ ‡§ñ‡§æ‡§¶‡•ç‡§Ø ‡§™‡§¶‡§æ‡§∞‡•ç‡§• ‡§∏‡•Ä‡§Æ‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§ï‡•á‡§µ‡§≤ ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§ ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§∏‡§™‡•ç‡§≤‡•Ä‡§Æ‡•á‡§Ç‡§ü ‡§≤‡•á‡§Ç
‚Ä¢ ‡§∏‡•ç‡§§‡§∞ ‡§Ö‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä"""
        }
    }
    
    # Generate explanation based on detected tests with actual values
    if detected_tests:
        test_explanations = []
        for test in detected_tests:
            if test in explanations:
                base_explanation = explanations[test].get(target_language, explanations[test]["English"])
                
                # Add specific value analysis if we have extracted values
                value_analysis = generate_value_analysis(test, extracted_values, target_language)
                if value_analysis:
                    base_explanation += "\n\n" + value_analysis
                
                test_explanations.append(base_explanation)
        
        if test_explanations:
            result = "\n\n" + "="*50 + "\n\n".join(test_explanations)
        else:
            result = explanations["CBC"].get(target_language, explanations["CBC"]["English"])
    else:
        result = explanations["CBC"].get(target_language, explanations["CBC"]["English"])
    
    # Add comprehensive general health tips
    health_tips = {
        "English": """
üè• *Comprehensive Health Guidelines:*

*üíß Hydration & Nutrition:*
‚Ä¢ Drink 8-10 glasses of water daily
‚Ä¢ Eat 5-7 servings of fruits and vegetables
‚Ä¢ Include whole grains, lean proteins, and healthy fats
‚Ä¢ Limit processed foods, sugar, and excessive salt
‚Ä¢ Consider portion control and mindful eating

*üèÉ‚Äç‚ôÇ Physical Activity:*
‚Ä¢ Aim for 150 minutes of moderate exercise weekly
‚Ä¢ Include both cardio and strength training
‚Ä¢ Take regular breaks from sitting
‚Ä¢ Walk 10,000 steps daily if possible
‚Ä¢ Find activities you enjoy to stay consistent

*üò¥ Sleep & Recovery:*
‚Ä¢ Maintain consistent sleep schedule
‚Ä¢ Create a relaxing bedtime routine
‚Ä¢ Keep bedroom cool, dark, and quiet
‚Ä¢ Avoid screens 1 hour before bed
‚Ä¢ Aim for 7-9 hours of quality sleep

*üßò‚Äç‚ôÄ Mental Health:*
‚Ä¢ Practice stress management techniques
‚Ä¢ Take time for hobbies and relaxation
‚Ä¢ Stay connected with family and friends
‚Ä¢ Consider meditation or deep breathing
‚Ä¢ Seek professional help if needed

*üö≠ Lifestyle Choices:*
‚Ä¢ Avoid smoking and secondhand smoke
‚Ä¢ Limit alcohol to moderate amounts
‚Ä¢ Practice safe sun exposure
‚Ä¢ Maintain good hygiene habits
‚Ä¢ Stay up-to-date with vaccinations

*üè• Preventive Care:*
‚Ä¢ Schedule regular health check-ups
‚Ä¢ Know your family medical history
‚Ä¢ Monitor vital signs (blood pressure, weight)
‚Ä¢ Get recommended screenings
‚Ä¢ Keep a personal health record""",
        
        "Hindi": """
üè• *‡§µ‡•ç‡§Ø‡§æ‡§™‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§¶‡§ø‡§∂‡§æ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂:*

*üíß ‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§∂‡§® ‡§î‡§∞ ‡§™‡•ã‡§∑‡§£:*
‚Ä¢ ‡§¶‡•à‡§®‡§ø‡§ï 8-10 ‡§ó‡§ø‡§≤‡§æ‡§∏ ‡§™‡§æ‡§®‡•Ä ‡§™‡§ø‡§è‡§Ç
‚Ä¢ 5-7 ‡§∏‡§∞‡•ç‡§µ‡§ø‡§Ç‡§ó ‡§´‡§≤ ‡§î‡§∞ ‡§∏‡§¨‡•ç‡§ú‡§ø‡§Ø‡§æ‡§Ç ‡§ñ‡§æ‡§è‡§Ç
‚Ä¢ ‡§∏‡§æ‡§¨‡•Å‡§§ ‡§Ö‡§®‡§æ‡§ú, ‡§≤‡•Ä‡§® ‡§™‡•ç‡§∞‡•ã‡§ü‡•Ä‡§® ‡§î‡§∞ ‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§µ‡§∏‡§æ ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§™‡•ç‡§∞‡§∏‡§Ç‡§∏‡•ç‡§ï‡•É‡§§ ‡§ñ‡§æ‡§¶‡•ç‡§Ø ‡§™‡§¶‡§æ‡§∞‡•ç‡§•, ‡§ö‡•Ä‡§®‡•Ä ‡§î‡§∞ ‡§Ö‡§§‡•ç‡§Ø‡§ß‡§ø‡§ï ‡§®‡§Æ‡§ï ‡§∏‡•Ä‡§Æ‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§™‡•ã‡§∞‡•ç‡§∂‡§® ‡§ï‡§Ç‡§ü‡•ç‡§∞‡•ã‡§≤ ‡§î‡§∞ ‡§Æ‡§æ‡§á‡§Ç‡§°‡§´‡•Å‡§≤ ‡§à‡§ü‡§ø‡§Ç‡§ó ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç

*üèÉ‚Äç‚ôÇ ‡§∂‡§æ‡§∞‡•Ä‡§∞‡§ø‡§ï ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø:*
‚Ä¢ ‡§∏‡§æ‡§™‡•ç‡§§‡§æ‡§π‡§ø‡§ï 150 ‡§Æ‡§ø‡§®‡§ü ‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ ‡§ï‡§æ ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§∞‡§ñ‡•á‡§Ç
‚Ä¢ ‡§ï‡§æ‡§∞‡•ç‡§°‡§ø‡§Ø‡•ã ‡§î‡§∞ ‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§Ç‡§• ‡§ü‡•ç‡§∞‡•á‡§®‡§ø‡§Ç‡§ó ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§¨‡•à‡§†‡§®‡•á ‡§∏‡•á ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§¨‡•ç‡§∞‡•á‡§ï ‡§≤‡•á‡§Ç
‚Ä¢ ‡§Ø‡§¶‡§ø ‡§∏‡§Ç‡§≠‡§µ ‡§π‡•ã ‡§§‡•ã ‡§¶‡•à‡§®‡§ø‡§ï 10,000 ‡§ï‡§¶‡§Æ ‡§ö‡§≤‡•á‡§Ç
‚Ä¢ ‡§®‡§ø‡§∞‡§Ç‡§§‡§∞ ‡§∞‡§π‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ê‡§∏‡•Ä ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø‡§Ø‡§æ‡§Ç ‡§ñ‡•ã‡§ú‡•á‡§Ç ‡§ú‡•ã ‡§Ü‡§™‡§ï‡•ã ‡§™‡§∏‡§Ç‡§¶ ‡§π‡•ã‡§Ç

*üò¥ ‡§®‡•Ä‡§Ç‡§¶ ‡§î‡§∞ ‡§∞‡§ø‡§ï‡§µ‡§∞‡•Ä:*
‚Ä¢ ‡§®‡§ø‡§∞‡§Ç‡§§‡§∞ ‡§®‡•Ä‡§Ç‡§¶ ‡§ï‡§æ ‡§∏‡§Æ‡§Ø ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç
‚Ä¢ ‡§Ü‡§∞‡§æ‡§Æ‡§¶‡§æ‡§Ø‡§ï ‡§∏‡•ã‡§®‡•á ‡§ï‡•Ä ‡§¶‡§ø‡§®‡§ö‡§∞‡•ç‡§Ø‡§æ ‡§¨‡§®‡§æ‡§è‡§Ç
‚Ä¢ ‡§¨‡•á‡§°‡§∞‡•Ç‡§Æ ‡§ï‡•ã ‡§†‡§Ç‡§°‡§æ, ‡§Ö‡§Ç‡§ß‡•á‡§∞‡§æ ‡§î‡§∞ ‡§∂‡§æ‡§Ç‡§§ ‡§∞‡§ñ‡•á‡§Ç
‚Ä¢ ‡§∏‡•ã‡§®‡•á ‡§∏‡•á 1 ‡§ò‡§Ç‡§ü‡•á ‡§™‡§π‡§≤‡•á ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§® ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç
‚Ä¢ 7-9 ‡§ò‡§Ç‡§ü‡•á ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§®‡•Ä‡§Ç‡§¶ ‡§ï‡§æ ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§∞‡§ñ‡•á‡§Ç

*üßò‚Äç‚ôÄ ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø:*
‚Ä¢ ‡§§‡§®‡§æ‡§µ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§§‡§ï‡§®‡•Ä‡§ï‡•ã‡§Ç ‡§ï‡§æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§∂‡•å‡§ï ‡§î‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§∞‡§æ‡§Æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§Æ‡§Ø ‡§®‡§ø‡§ï‡§æ‡§≤‡•á‡§Ç
‚Ä¢ ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§î‡§∞ ‡§¶‡•ã‡§∏‡•ç‡§§‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ú‡•Å‡§°‡§º‡•á ‡§∞‡§π‡•á‡§Ç
‚Ä¢ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§Ø‡§æ ‡§ó‡§π‡§∞‡•Ä ‡§∏‡§æ‡§Ç‡§∏ ‡§≤‡•á‡§®‡•á ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•ã ‡§§‡•ã ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§Æ‡§¶‡§¶ ‡§≤‡•á‡§Ç

*üö≠ ‡§ú‡•Ä‡§µ‡§®‡§∂‡•à‡§≤‡•Ä ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™:*
‚Ä¢ ‡§ß‡•Ç‡§Æ‡•ç‡§∞‡§™‡§æ‡§® ‡§î‡§∞ ‡§∏‡•á‡§ï‡•á‡§Ç‡§°‡§π‡•à‡§Ç‡§° ‡§∏‡•ç‡§Æ‡•ã‡§ï ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç
‚Ä¢ ‡§∂‡§∞‡§æ‡§¨ ‡§ï‡•ã ‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ ‡§§‡§ï ‡§∏‡•Ä‡§Æ‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∏‡•Ç‡§∞‡•ç‡§Ø ‡§è‡§ï‡•ç‡§∏‡§™‡•ã‡§ú‡§∞ ‡§ï‡§æ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§∏‡•ç‡§µ‡§ö‡•ç‡§õ‡§§‡§æ ‡§Ü‡§¶‡§§‡•á‡§Ç ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç
‚Ä¢ ‡§ü‡•Ä‡§ï‡§æ‡§ï‡§∞‡§£ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ö‡§™‡§°‡•á‡§ü ‡§∞‡§π‡•á‡§Ç

*üè• ‡§®‡§ø‡§µ‡§æ‡§∞‡§ï ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤:*
‚Ä¢ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ú‡§æ‡§Ç‡§ö ‡§∂‡•á‡§°‡•ç‡§Ø‡•Ç‡§≤ ‡§ï‡§∞‡•á‡§Ç
‚Ä¢ ‡§Ö‡§™‡§®‡•á ‡§™‡§æ‡§∞‡§ø‡§µ‡§æ‡§∞‡§ø‡§ï ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§á‡§§‡§ø‡§π‡§æ‡§∏ ‡§ï‡•ã ‡§ú‡§æ‡§®‡•á‡§Ç
‚Ä¢ ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∏‡§Ç‡§ï‡•á‡§§‡•ã‡§Ç ‡§ï‡•Ä ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§ï‡§∞‡•á‡§Ç (‡§∞‡§ï‡•ç‡§§‡§ö‡§æ‡§™, ‡§µ‡§ú‡§®)
‚Ä¢ ‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§ø‡§§ ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§®‡§ø‡§Ç‡§ó ‡§ï‡§∞‡§µ‡§æ‡§è‡§Ç
‚Ä¢ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§∞‡§ñ‡•á‡§Ç"""
    }
    
    result += health_tips.get(target_language, health_tips["English"])
    
    # Add summary section
    summary = generate_summary(extracted_values, detected_tests, target_language)
    if summary:
        result += "\n\n" + "="*50 + "\n" + summary
    
    # Add disclaimer
    disclaimer = {
        "English": "\n\n‚ö† *Important Disclaimer*: This is a basic educational explanation. Always consult your healthcare provider for detailed interpretation of your medical report and personalized medical advice.",
        "Hindi": "\n\n‚ö† *‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§∞‡§£*: ‡§Ø‡§π ‡§è‡§ï ‡§¨‡•Å‡§®‡§ø‡§Ø‡§æ‡§¶‡•Ä ‡§∂‡•à‡§ï‡•ç‡§∑‡§ø‡§ï ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ ‡§π‡•à‡•§ ‡§Ö‡§™‡§®‡•Ä ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡•Ä ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ ‡§î‡§∞ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§≤‡§æ‡§π ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡§Æ‡•á‡§∂‡§æ ‡§Ö‡§™‡§®‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•á‡§µ‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§§‡§æ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§"
    }
    
    result += disclaimer.get(target_language, disclaimer["English"])
    
    # Add API setup reminder
    result += f"\n\nüîë *Note*: For AI-powered detailed analysis, please set up your Hugging Face API key with 'Inference API' permissions at https://huggingface.co/settings/tokens"
    
    return result

def generate_summary(extracted_values, detected_tests, target_language="English"):
    """Generate an overall summary of the medical report"""
    
    if not extracted_values:
        return ""
    
    summary = ""
    
    if target_language == "Hindi":  # Hindi
        summary += "üìä *‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂:*\n\n"
        
        # Count abnormal values
        abnormal_count = 0
        normal_count = 0
        
        # Check each value
        if 'hemoglobin' in extracted_values:
            hgb = float(extracted_values['hemoglobin'])
            if hgb < 12 or hgb > 16:
                abnormal_count += 1
            else:
                normal_count += 1
        
        if 'cholesterol' in extracted_values:
            chol = int(extracted_values['cholesterol'])
            if chol > 200:
                abnormal_count += 1
            else:
                normal_count += 1
        
        if 'tsh' in extracted_values:
            tsh = float(extracted_values['tsh'])
            if tsh < 0.4 or tsh > 4.0:
                abnormal_count += 1
            else:
                normal_count += 1
        
        if 'glucose' in extracted_values:
            glucose = int(extracted_values['glucose'])
            if glucose > 100:
                abnormal_count += 1
            else:
                normal_count += 1
        
        # Generate summary based on counts
        if abnormal_count == 0:
            summary += "‚úÖ *‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§∏‡•ç‡§•‡§ø‡§§‡§ø: ‡§∏‡§≠‡•Ä ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡•Ä‡§Æ‡§æ ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§§‡•Ä‡§§ ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç*\n"
            summary += "‚Ä¢ ‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§ú‡•Ä‡§µ‡§®‡§∂‡•à‡§≤‡•Ä ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç\n"
            summary += "‚Ä¢ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡•Ä ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂\n"
        elif abnormal_count <= 2:
            summary += "‚ö† *‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§∏‡•ç‡§•‡§ø‡§§‡§ø: ‡§ï‡•Å‡§õ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡•ã‡§Ç ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§®‡•á ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ*\n"
            summary += "‚Ä¢ ‡§Ö‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§®‡§ø‡§ï‡§ü ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§ï‡§∞‡•á‡§Ç\n"
            summary += "‚Ä¢ ‡§ú‡•Ä‡§µ‡§®‡§∂‡•à‡§≤‡•Ä ‡§∏‡§Ç‡§∂‡•ã‡§ß‡§® ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç\n"
            summary += "‚Ä¢ ‡§Ö‡§™‡§®‡•á ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§´‡•â‡§≤‡•ã-‡§Ö‡§™ ‡§ï‡§∞‡•á‡§Ç\n"
        else:
            summary += "üö® *‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§∏‡•ç‡§•‡§ø‡§§‡§ø: ‡§ï‡§à ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡•ã‡§Ç ‡§™‡§∞ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§®‡•á ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ*\n"
            summary += "‚Ä¢ ‡§ú‡§≤‡•ç‡§¶ ‡§∏‡•á ‡§ú‡§≤‡•ç‡§¶ ‡§Ö‡§™‡§®‡•á ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç\n"
            summary += "‚Ä¢ ‡§µ‡•ç‡§Ø‡§æ‡§™‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç\n"
            summary += "‚Ä¢ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•ã‡§Ç ‡§ï‡§æ ‡§¨‡§æ‡§∞‡•Ä‡§ï‡•Ä ‡§∏‡•á ‡§™‡§æ‡§≤‡§® ‡§ï‡§∞‡•á‡§Ç\n"
        
        summary += f"\n*‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§ø‡§§ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø:* {len(extracted_values)} ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£\n"
        summary += f"*‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø:* {normal_count} | *‡§Ö‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø:* {abnormal_count}\n"
    else:  # English and other languages default to English
        summary += "üìä *Report Summary:*\n\n"
        
        # Count abnormal values
        abnormal_count = 0
        normal_count = 0
        
        # Check each value
        if 'hemoglobin' in extracted_values:
            hgb = float(extracted_values['hemoglobin'])
            if hgb < 12 or hgb > 16:
                abnormal_count += 1
            else:
                normal_count += 1
        
        if 'cholesterol' in extracted_values:
            chol = int(extracted_values['cholesterol'])
            if chol > 200:
                abnormal_count += 1
            else:
                normal_count += 1
        
        if 'tsh' in extracted_values:
            tsh = float(extracted_values['tsh'])
            if tsh < 0.4 or tsh > 4.0:
                abnormal_count += 1
            else:
                normal_count += 1
        
        if 'glucose' in extracted_values:
            glucose = int(extracted_values['glucose'])
            if glucose > 100:
                abnormal_count += 1
            else:
                normal_count += 1
        
        # Generate summary based on counts
        if abnormal_count == 0:
            summary += "‚úÖ *Overall Status: All values appear to be within normal ranges*\n"
            summary += "‚Ä¢ Continue maintaining healthy lifestyle\n"
            summary += "‚Ä¢ Regular check-ups recommended\n"
        elif abnormal_count <= 2:
            summary += "‚ö† *Overall Status: Some values need attention*\n"
            summary += "‚Ä¢ Monitor abnormal values closely\n"
            summary += "‚Ä¢ Consider lifestyle modifications\n"
            summary += "‚Ä¢ Follow up with your doctor\n"
        else:
            summary += "üö® *Overall Status: Multiple values require immediate attention*\n"
            summary += "‚Ä¢ Consult your doctor as soon as possible\n"
            summary += "‚Ä¢ Consider comprehensive health evaluation\n"
            summary += "‚Ä¢ Follow medical recommendations closely\n"
        
        summary += f"\n*Values Analyzed:* {len(extracted_values)} tests\n"
        summary += f"*Normal:* {normal_count} | *Abnormal:* {abnormal_count}\n"
        
    return summary

# FIXED: Enhanced additional resources function
def show_additional_resources(target_language="English"):
    """Show additional resources with proper translation"""
    
    translations = {
        "English": {
            "title": "üìö Additional Resources",
            "find_doctor": "ü©∫ Find a Doctor",
            "learn_more": "üìñ Learn More",
            "emergency": "üìû Emergency Info",
            "doctor_info": "üí° Consider consulting a healthcare provider for detailed interpretation.",
            "learn_info": "üìö Research your conditions on reputable medical websites.",
            "emergency_info": "üö® Emergency: 102 (India), 911 (US), 112 (EU), 999 (UK)"
        },
        "Hindi": {
            "title": "üìö ‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§∏‡§Ç‡§∏‡§æ‡§ß‡§®",
            "find_doctor": "ü©∫ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ñ‡•ã‡§ú‡•á‡§Ç",
            "learn_more": "üìñ ‡§î‡§∞ ‡§ú‡§æ‡§®‡•á‡§Ç",
            "emergency": "üìû ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä",
            "doctor_info": "üí° ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•á‡§µ‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§§‡§æ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§",
            "learn_info": "üìö ‡§™‡•ç‡§∞‡§§‡§ø‡§∑‡•ç‡§†‡§ø‡§§ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü‡•ã‡§Ç ‡§™‡§∞ ‡§Ö‡§™‡§®‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡•á‡§Ç‡•§",
            "emergency_info": "üö® ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤: 102 (‡§≠‡§æ‡§∞‡§§), 911 (‡§Ö‡§Æ‡•á‡§∞‡§ø‡§ï‡§æ), 112 (‡§Ø‡•Ç‡§∞‡•ã‡§™), 999 (‡§Ø‡•Ç‡§ï‡•á)"
        },
        "Spanish": {
            "title": "üìö Recursos Adicionales",
            "find_doctor": "ü©∫ Encontrar un M√©dico",
            "learn_more": "üìñ Aprender M√°s",
            "emergency": "üìû Informaci√≥n de Emergencia",
            "doctor_info": "üí° Considere consultar a un proveedor de atenci√≥n m√©dica para una interpretaci√≥n detallada.",
            "learn_info": "üìö Investigue sus condiciones en sitios web m√©dicos confiables.",
            "emergency_info": "üö® Emergencia: 102 (India), 911 (EE.UU.), 112 (UE), 999 (Reino Unido)"
        }
    }
    
    lang_pack = translations.get(target_language, translations["English"])
    
    title = lang_pack["title"]
    find_doctor = lang_pack["find_doctor"]
    learn_more = lang_pack["learn_more"]
    emergency = lang_pack["emergency"]
    doctor_info = lang_pack["doctor_info"]
    learn_info = lang_pack["learn_info"]
    emergency_info = lang_pack["emergency_info"]
    
    st.markdown(f'<h3 style="color: #2c3e50; font-family: \'Poppins\', sans-serif;">{title}</h3>', unsafe_allow_html=True)
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button(find_doctor, key="find_doctor_btn"):
            st.info(doctor_info)
    
    with col2:
        if st.button(learn_more, key="learn_more_btn"):
            st.info(learn_info)
    
    with col3:
        if st.button(emergency, key="emergency_btn"):
            st.warning(emergency_info)

# Main UI with Enhanced Professional Design
st.markdown("""
<div class="main-header">
    <span class="medical-icon">üè•</span>
    MediSimplify
    <span class="medical-icon">üíä</span>
</div>
""", unsafe_allow_html=True)

st.markdown("""
<div class="subtitle">
    <span class="medical-icon">üî¨</span>
    AI-Powered Medical Report Simplifier
    <span class="medical-icon">üìä</span>
    <br>
    <small style="font-size: 1rem; opacity: 0.8;">Professional Medical Analysis ‚Ä¢ Multi-Language Support ‚Ä¢ Instant Results</small>
</div>
""", unsafe_allow_html=True)

# Professional Feature Cards
st.markdown("""
<div class="metric-container">
    <div class="metric-item">
        <div class="metric-value">üè•</div>
        <div class="metric-label">Medical Analysis</div>
    </div>
    <div class="metric-item">
        <div class="metric-value">üåê</div>
        <div class="metric-label">Multi-Language</div>
    </div>
    <div class="metric-item">
        <div class="metric-value">‚ö°</div>
        <div class="metric-label">Instant Results</div>
    </div>
    <div class="metric-item">
        <div class="metric-value">üîí</div>
        <div class="metric-label">Secure & Private</div>
    </div>
</div>
""", unsafe_allow_html=True)

# API Key Setup Section
if HUGGINGFACE_API_KEY == "hf_your_api_key_here":
    st.markdown("""
    <div style="background: linear-gradient(135deg, #ff6b6b 0%, #ffa726 100%); padding: 2rem; border-radius: 15px; margin: 2rem 0; color: white; text-align: center;">
        <h3>üîë Setup Required</h3>
        <p><strong>To use this app, you need a free Hugging Face API key:</strong></p>
        <ol style="text-align: left; display: inline-block;">
            <li>Go to <a href="https://huggingface.co/settings/tokens" target="_blank" style="color: white; text-decoration: underline;">https://huggingface.co/settings/tokens</a></li>
            <li>Create a free account if you don't have one</li>
            <li>Generate a new token (select "Inference API" access)</li>
            <li>Copy the token and replace "hf_your_api_key_here" in the code</li>
        </ol>
        <p><em>Don't worry, it's completely free and takes just 2 minutes!</em></p>
    </div>
    """, unsafe_allow_html=True)
elif "403" in str(HUGGINGFACE_API_KEY) or "authentication" in str(HUGGINGFACE_API_KEY).lower():
    st.markdown("""
    <div style="background: linear-gradient(135deg, #ff6b6b 0%, #ffa726 100%); padding: 2rem; border-radius: 15px; margin: 2rem 0; color: white; text-align: center;">
        <h3>üîë API Key Issue</h3>
        <p><strong>Your API key needs "Inference API" permissions:</strong></p>
        <ol style="text-align: left; display: inline-block;">
            <li>Go to <a href="https://huggingface.co/settings/tokens" target="_blank" style="color: white; text-decoration: underline;">https://huggingface.co/settings/tokens</a></li>
            <li>Delete your current token</li>
            <li>Create a new token with "Inference API" access (not just "Read")</li>
            <li>Update the API key in the code</li>
        </ol>
        <p><em>This will fix the 403 permission error!</em></p>
    </div>
    """, unsafe_allow_html=True)

# Sidebar
with st.sidebar:
    st.markdown('<div style="color: white; font-family: \'Poppins\', sans-serif;"><h3>üáÆüá≥ Indian Languages</h3></div>', unsafe_allow_html=True)
    st.markdown("""
    <div style="color: white; font-family: 'Poppins', sans-serif; line-height: 1.8;">
    ‚Ä¢ ‡§π‡§ø‡§Ç‡§¶‡•Ä (Hindi)<br>
    ‚Ä¢ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ (Bengali)<br>
    ‚Ä¢ ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å (Telugu)<br>
    ‚Ä¢ ‡§Æ‡§∞‡§æ‡§†‡•Ä (Marathi)<br>
    ‚Ä¢ ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç (Tamil)<br>
    ‚Ä¢ ‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä (Gujarati)<br>
    ‚Ä¢ ‡≤ï‡≤®‡≥ç‡≤®‡≤° (Kannada)<br>
    ‚Ä¢ ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç (Malayalam)<br>
    ‚Ä¢ ‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä (Punjabi)<br>
    ‚Ä¢ ‡¨ì‡¨°‡¨º‡¨ø‡¨Ü (Odia)<br>
    ‚Ä¢ ÿßÿ±ÿØŸà (Urdu)
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown('<div style="color: white; font-family: \'Poppins\', sans-serif;"><h3>üåç International</h3></div>', unsafe_allow_html=True)
    st.markdown("""
    <div style="color: white; font-family: 'Poppins', sans-serif; line-height: 1.8;">
    ‚Ä¢ English ‚Ä¢ Espa√±ol ‚Ä¢ Fran√ßais<br>
    ‚Ä¢ Deutsch ‚Ä¢ ‰∏≠Êñá ‚Ä¢ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©<br>
    ‚Ä¢ Portugu√™s ‚Ä¢ –†—É—Å—Å–∫–∏–π ‚Ä¢ Êó•Êú¨Ë™û
    </div>
    """, unsafe_allow_html=True)

# Main content area
col1, col2 = st.columns([2, 1])

with col1:
    st.markdown('<h3 style="color: white; font-family: \'Poppins\', sans-serif; font-size: 1.8rem; font-weight: 600; text-align: center;">üìÑ Upload Your Medical Report</h3>', unsafe_allow_html=True)
    
    tab1, tab2 = st.tabs(["üìÅ Upload PDF File", "üìù Paste Text Directly"])
    report_text_from_pdf = ""
    
    with tab1:
        st.markdown("""
        <div style="text-align: center; margin: 2rem 0;">
            <div class="medical-icon">üìÑ</div>
            <h3 style="color: #2c3e50; margin: 1rem 0;">Upload Your Medical Report PDF</h3>
            <p style="color: #666; margin-bottom: 2rem;">Supported formats: PDF files up to 200MB</p>
        </div>
        """, unsafe_allow_html=True)
        
        uploaded_file = st.file_uploader(
            "Choose a PDF file",
            type=['pdf'],
            help="Upload your medical test report PDF",
            label_visibility="collapsed"
        )
        
        if uploaded_file is not None:
            report_text_from_pdf = extract_pdf_text(uploaded_file)
            if "Error" not in report_text_from_pdf:
                st.success("‚úÖ PDF uploaded successfully!")
                with st.expander("üìã View Extracted Text"):
                    st.text_area("Extracted Content", report_text_from_pdf, height=200)
            else:
                st.error(report_text_from_pdf)
    
    with tab2:
        st.markdown("""
        <div style="text-align: center; margin: 2rem 0;">
            <div class="medical-icon">üìù</div>
            <h3 style="color: #2c3e50; margin: 1rem 0;">Paste Your Medical Report Text</h3>
            <p style="color: #666; margin-bottom: 2rem;">Copy and paste the text from your medical report directly</p>
        </div>
        """, unsafe_allow_html=True)
        
        report_text_from_paste = st.text_area(
            "Paste your medical report text here:",
            height=200,
            placeholder="""Example:
COMPLETE BLOOD COUNT:
Hemoglobin: 10.5 g/dL (Normal: 12.0-15.5)
Total Cholesterol: 240 mg/dL (Normal: <200)
TSH: 5.8 mIU/L (Normal: 0.4-4.0)""",
            label_visibility="collapsed"
        )

with col2:
    st.markdown('<h3 style="color: white; font-family: \'Poppins\', sans-serif; font-size: 1.8rem; font-weight: 600; text-align: center;">üåê Select Your Language</h3>', unsafe_allow_html=True)

    # Group languages for better UX
    indian_languages = ["Hindi", "Bengali", "Telugu", "Marathi", "Tamil", "Gujarati", "Kannada", "Malayalam", "Punjabi", "Odia", "Urdu"]
    international_languages = ["English", "Spanish", "French", "German", "Chinese", "Arabic", "Portuguese", "Russian", "Japanese"]
    
    # Create display options with separators
    language_options = (
        ["--- Indian Languages ---"] + [LANGUAGE_MAPPING[lang] for lang in indian_languages] +
        ["--- International Languages ---"] + [LANGUAGE_MAPPING[lang] for lang in international_languages]
    )
    
    # Reverse mapping to get key from value
    reverse_language_mapping = {v: k for k, v in LANGUAGE_MAPPING.items()}
    
    selected_language_display = st.selectbox(
        "Choose your preferred language",
        options=language_options,
        index=language_options.index("English"), # Default to English
        label_visibility="collapsed"
    )
    
    # Get the actual language key
    if "---" in selected_language_display:
        selected_language = "English" # Default if a separator is somehow selected
    else:
        selected_language = reverse_language_mapping[selected_language_display]

    # Simplify button
    if st.button("‚ú® Simplify My Report", use_container_width=True):
        report_text = report_text_from_paste or report_text_from_pdf
        
        if report_text:
            with st.spinner("üî¨ Analyzing your report... This may take a moment..."):
                time.sleep(1) # Simulate work
                
                # Identify test types
                detected_tests = identify_test_types(report_text)
                
                # Simplify the report
                simplified_report = simplify_medical_report(report_text, detected_tests, selected_language)
                
                # Display results
                st.session_state.simplified_report = simplified_report
                st.session_state.detected_tests = detected_tests
                st.session_state.selected_language = selected_language
        else:
            st.warning("Please upload a PDF or paste text to simplify.")

# Display results below the columns
if 'simplified_report' in st.session_state:
    st.markdown("---")
    st.markdown('<h2 class="section-title">Your Simplified Report</h2>', unsafe_allow_html=True)
    
    # Display detected tests
    if st.session_state.detected_tests:
        tests_str = '`, `'.join(st.session_state.detected_tests)
        st.markdown(f"**Detected Test Types:** `{tests_str}`")
    
    # Display translation info
    if st.session_state.selected_language != "English":
        st.markdown(f"""
        <div class="translation-info">
            <p><strong>Translation Info:</strong> The report has been simplified and translated into <strong>{st.session_state.selected_language}</strong>. Please note that this is an AI-generated translation and may not be perfect. Always consult a professional for critical medical decisions.</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Display the simplified report in a professional card
    report_html = st.session_state.simplified_report.replace('\n', '<br>')
    st.markdown(f"""
    <div class="professional-card">
        {report_html}
    </div>
    """, unsafe_allow_html=True)
    
    # Show additional resources
    show_additional_resources(st.session_state.selected_language)

# Footer
st.markdown("""
<div class="footer">
    <p><strong>MediSimplify</strong> &copy; 2024 | AI-Powered Medical Report Simplification</p>
    <p><em>This tool is for informational purposes only and does not constitute medical advice.</em></p>
    <p>Developed with ‚ù§Ô∏è using Streamlit & Hugging Face</p>
</div>
""", unsafe_allow_html=True)